const dotenv = require("dotenv");
const { connectDB } = require("./db");
const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const path = require("path");
const cors = require("cors");




//configuring dotenv , where all secrets passthrough
dotenv.config();

//defining port == suggestion  = dotenv.config(); needs to be in first
const PORT = process.env.HOST || 1000;

const DB_Name = process.env.DB_Name;

const app = express();

//middleware
app.use(express.json());

app.use(cors());

//connect to database
connectDB();

// Custom middleware
app.get("/", (req, res) => {
  res.send("API is working");
});

app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
  // console.log(`Database name is ${DB_Name}`);
});

// this is the path files that are required for the api to connect
// const authController = require("./src/controller/authController");


app.use("/uploads", express.static(path.join(__dirname, "src/uploads")));


const authRoutes = require("./src/routes/authRoutes");
const productRoute = require("./src/routes/productRoutes");

app.use("/user", authRoutes);
app.use("/product", productRoute);

module.exports = app;


//this is just for testing the image path
// const fs = require("fs");

// app.get("/test-image", (req, res) => {
//   const imgPath = path.join(__dirname, "src/uploads", "fire.jpeg");
//   if (fs.existsSync(imgPath)) {
//     res.sendFile(imgPath);
//   } else {
//     res.status(404).send("Image not found");
//   }
// });




const updateProduct = async (req, res) => {
  try {
    const itemImage = req.file ? `uploads/itemsImage/${req.file.filename}` : null;
    const {
      itemId,
      itemName,
      itemDesc,
      quantity,
      category,
      weight,
      purchasePrice,
      sellingPrice,
      supplierId,
      taxRate,
      discontInfo,
      isActive,
      recordLevel,
      updatedDate,
    } = req.body;

    if (!itemId) {
      return res.status(400).json({ message: "Item ID is required" });
    }

    // Fetch existing product (optional, for existence check)
    const productRes = await pool.query("SELECT * FROM products WHERE item_id = $1", [itemId]);
    if (productRes.rows.length === 0) {
      return res.status(404).json({ message: "Product not found" });
    }

    // Build fields and values dynamically
    const fields = [];
    const values = [];
    let index = 1;

    const addField = (fieldName, value) => {
      if (value !== undefined && value !== null) {
        fields.push(`${fieldName} = $${index++}`);
        values.push(value);
      }
    };

    addField("item_name", itemName);
    addField("item_desc", itemDesc);
    addField("quantity", quantity);
    addField("category", category);
    addField("weight", weight);
    addField("purchase_price", purchasePrice);
    addField("selling_price", sellingPrice);
    addField("supplier_id", supplierId);
    addField("tax_rate", taxRate);
    addField("discont_info", discontInfo);
    addField("is_active", isActive);
    addField("record_level", recordLevel);
    addField("updated_date", updatedDate);
    if (itemImage) {
      addField("item_image", itemImage);
    }

    if (fields.length === 0) {
      return res.status(400).json({ message: "No fields provided to update" });
    }

    const query = `
      UPDATE products SET ${fields.join(", ")}
      WHERE item_id = $${index}
      RETURNING *;
    `;
    values.push(itemId); // Final value is for WHERE condition

    const result = await pool.query(query, values);

    res.json({
      success: true,
      message: "Product updated successfully",
      product: result.rows[0],
    });
  } catch (error) {
    console.error("Error updating product:", error);
    res.status(500).json({ message: "Server error while updating product" });
  }
};



        ------------------------------------VS---------------------------------

const updateProduct = async (req, res) => {
  try {
    const itemImage = req.file ? `uploads/itemsImage/${req.file.filename}` : null;
    const {
      itemId,
      itemName,
      itemDesc,
      quantity,
      category,
      weight,
      purchasePrice,
      sellingPrice,
      supplierId,
      taxRate,
      discontInfo,
      isActive,
      recordLevel,
      updatedDate,
    } = req.body;

    if (!itemId) {
      return res.status(400).json({ message: "Item ID is required" });
    }

    // Fetch existing product (optional, for existence check)
    const productRes = await pool.query("SELECT * FROM products WHERE item_id = $1", [itemId]);
    if (productRes.rows.length === 0) {
      return res.status(404).json({ message: "Product not found" });
    }

    // Build fields and values dynamically
    const fields = [];
    const values = [];
    let index = 1;

    const addField = (fieldName, value) => {
      if (value !== undefined && value !== null) {
        fields.push(`${fieldName} = $${index++}`);
        values.push(value);
      }
    };

    addField("item_name", itemName);
    addField("item_desc", itemDesc);
    addField("quantity", quantity);
    addField("category", category);
    addField("weight", weight);
    addField("purchase_price", purchasePrice);
    addField("selling_price", sellingPrice);
    addField("supplier_id", supplierId);
    addField("tax_rate", taxRate);
    addField("discont_info", discontInfo);
    addField("is_active", isActive);
    addField("record_level", recordLevel);
    addField("updated_date", updatedDate);
    if (itemImage) {
      addField("item_image", itemImage);
    }

    if (fields.length === 0) {
      return res.status(400).json({ message: "No fields provided to update" });
    }

    const query = `
      UPDATE products SET ${fields.join(", ")}
      WHERE item_id = $${index}
      RETURNING *;
    `;
    values.push(itemId); // Final value is for WHERE condition

    const result = await pool.query(query, values);

    res.json({
      success: true,
      message: "Product updated successfully",
      product: result.rows[0],
    });
  } catch (error) {
    console.error("Error updating product:", error);
    res.status(500).json({ message: "Server error while updating product" });
  }
};


| Feature               | Old Version                           | New Version (Refactored)        |
| --------------------- | ------------------------------------- | ------------------------------- |
| Manual index shifting | ‚ùå Yes ‚Äì error-prone                   | ‚úÖ No ‚Äì indexes auto-increment   |
| Maintainability       | ‚ùå Hard to add/remove fields           | ‚úÖ Easy ‚Äì just call `addField()` |
| Clean structure       | ‚ùå Cluttered logic inside query string | ‚úÖ Separated logic, readable     |
| Query safety          | ‚ö†Ô∏è Prone to mismatched placeholders   | ‚úÖ Fully aligned placeholders    |
