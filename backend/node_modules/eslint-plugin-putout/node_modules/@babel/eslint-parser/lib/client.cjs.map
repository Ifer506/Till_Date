{"version":3,"names":["path","require","ACTIONS","exports","GET_VERSION","GET_TYPES_INFO","GET_VISITOR_KEYS","GET_TOKEN_LABELS","MAYBE_PARSE","MAYBE_PARSE_SYNC","Client","send","constructor","vCache","getVersion","undefined","tiCache","getTypesInfo","vkCache","getVisitorKeys","tlCache","getTokLabels","maybeParse","code","options","WorkerClient","worker_threads_cache","worker_threads","#worker_threads","worker","Worker","resolve","__dirname","env","SHARE_ENV","action","payload","signal","Int32Array","SharedArrayBuffer","subChannel","MessageChannel","postMessage","port","port1","Atomics","wait","message","receiveMessageOnPort","port2","error","Object","assign","errorData","result","unref"],"sources":["../src/client.cts"],"sourcesContent":["import type { Options } from \"./types.cts\";\n\nimport path = require(\"path\");\n\nexport const enum ACTIONS {\n  GET_VERSION = \"GET_VERSION\",\n  GET_TYPES_INFO = \"GET_TYPES_INFO\",\n  GET_VISITOR_KEYS = \"GET_VISITOR_KEYS\",\n  GET_TOKEN_LABELS = \"GET_TOKEN_LABELS\",\n  MAYBE_PARSE = \"MAYBE_PARSE\",\n  MAYBE_PARSE_SYNC = \"MAYBE_PARSE_SYNC\",\n}\n\nexport class Client {\n  #send;\n\n  constructor(send: Function) {\n    this.#send = send;\n  }\n\n  #vCache: string;\n  getVersion() {\n    return (this.#vCache ??= this.#send(ACTIONS.GET_VERSION, undefined));\n  }\n\n  #tiCache: any;\n  getTypesInfo() {\n    return (this.#tiCache ??= this.#send(ACTIONS.GET_TYPES_INFO, undefined));\n  }\n\n  #vkCache: any;\n  getVisitorKeys() {\n    return (this.#vkCache ??= this.#send(ACTIONS.GET_VISITOR_KEYS, undefined));\n  }\n\n  #tlCache: any;\n  getTokLabels() {\n    return (this.#tlCache ??= this.#send(ACTIONS.GET_TOKEN_LABELS, undefined));\n  }\n\n  maybeParse(code: string, options: Options) {\n    return this.#send(ACTIONS.MAYBE_PARSE, { code, options });\n  }\n}\n\n// We need to run Babel in a worker for two reasons:\n// 1. ESLint workers must be CJS files, and this is a problem\n//    since Babel 8+ uses native ESM\n// 2. ESLint parsers must run synchronously, but many steps\n//    of Babel's config loading (which is done for each file)\n//    can be asynchronous\n// If ESLint starts supporting async parsers, we can move\n// everything back to the main thread.\nexport class WorkerClient extends Client {\n  static #worker_threads_cache: typeof import(\"worker_threads\");\n  static get #worker_threads() {\n    return (WorkerClient.#worker_threads_cache ??= require(\"worker_threads\"));\n  }\n\n  #worker = new WorkerClient.#worker_threads.Worker(\n    path.resolve(__dirname, \"../lib/worker/index.cjs\"),\n    { env: WorkerClient.#worker_threads.SHARE_ENV },\n  );\n\n  constructor() {\n    super((action: ACTIONS, payload: any) => {\n      // We create a new SharedArrayBuffer every time rather than reusing\n      // the same one, otherwise sometimes its contents get corrupted and\n      // Atomics.wait wakes up too early.\n      // https://github.com/babel/babel/pull/14541\n      const signal = new Int32Array(new SharedArrayBuffer(8));\n\n      const subChannel = new WorkerClient.#worker_threads.MessageChannel();\n\n      this.#worker.postMessage(\n        { signal, port: subChannel.port1, action, payload },\n        [subChannel.port1],\n      );\n\n      Atomics.wait(signal, 0, 0);\n      const { message } = WorkerClient.#worker_threads.receiveMessageOnPort(\n        subChannel.port2,\n      );\n\n      if (message.error) throw Object.assign(message.error, message.errorData);\n      else return message.result;\n    });\n\n    // The worker will never exit by itself. Prevent it from keeping\n    // the main process alive.\n    this.#worker.unref();\n  }\n}\n\nif (!USE_ESM) {\n  exports.LocalClient = class LocalClient extends Client {\n    static #handleMessage: Function;\n\n    constructor() {\n      LocalClient.#handleMessage ??= require(\"./worker/handle-message.cjs\");\n\n      super((action: ACTIONS, payload: any) => {\n        return LocalClient.#handleMessage(\n          action === ACTIONS.MAYBE_PARSE ? ACTIONS.MAYBE_PARSE_SYNC : action,\n          payload,\n        );\n      });\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}