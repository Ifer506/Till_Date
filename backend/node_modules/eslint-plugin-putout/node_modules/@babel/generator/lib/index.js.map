{"version":3,"file":"index.js","sources":["../src/source-map.ts","../src/buffer.ts","../src/node/whitespace.ts","../src/node/parentheses.ts","../src/node/index.ts","../src/generators/template-literals.ts","../src/generators/expressions.ts","../src/generators/statements.ts","../src/generators/classes.ts","../src/generators/methods.ts","../src/generators/modules.ts","../src/generators/types.ts","../src/generators/flow.ts","../src/generators/base.ts","../src/generators/jsx.ts","../src/generators/typescript.ts","../src/printer.ts","../src/index.ts"],"sourcesContent":["import {\n  GenMapping,\n  maybeAddMapping,\n  setSourceContent,\n  allMappings,\n  toEncodedMap,\n  toDecodedMap,\n} from \"@jridgewell/gen-mapping\";\n\nimport type {\n  EncodedSourceMap,\n  DecodedSourceMap,\n  Mapping,\n} from \"@jridgewell/gen-mapping\";\n\nimport {\n  type SourceMapInput,\n  originalPositionFor,\n  TraceMap,\n} from \"@jridgewell/trace-mapping\";\n\n/**\n * Build a sourcemap.\n */\n\nexport default class SourceMap {\n  private _map: GenMapping;\n  private _rawMappings: Mapping[] | undefined;\n  private _sourceFileName: string | undefined;\n\n  // Any real line is > 0, so init to 0 is fine.\n  private _lastGenLine = 0;\n  private _lastSourceLine = 0;\n\n  // Source columns can be 0, but we only check in unison with sourceLine, which\n  // inits to an impossible value. So init to 0 is fine.\n  private _lastSourceColumn = 0;\n\n  public _inputMap: TraceMap;\n\n  constructor(\n    opts: {\n      sourceFileName?: string;\n      sourceRoot?: string;\n      inputSourceMap?: SourceMapInput;\n    },\n    code: string | { [sourceFileName: string]: string },\n  ) {\n    const map = (this._map = new GenMapping({ sourceRoot: opts.sourceRoot }));\n    this._sourceFileName = opts.sourceFileName?.replace(/\\\\/g, \"/\");\n    this._rawMappings = undefined;\n\n    if (opts.inputSourceMap) {\n      this._inputMap = new TraceMap(opts.inputSourceMap);\n      const resolvedSources = this._inputMap.resolvedSources;\n      if (resolvedSources.length) {\n        for (let i = 0; i < resolvedSources.length; i++) {\n          setSourceContent(\n            map,\n            resolvedSources[i],\n            this._inputMap.sourcesContent?.[i],\n          );\n        }\n      }\n    }\n\n    if (typeof code === \"string\" && !opts.inputSourceMap) {\n      setSourceContent(map, this._sourceFileName, code);\n    } else if (typeof code === \"object\") {\n      for (const sourceFileName of Object.keys(code)) {\n        setSourceContent(\n          map,\n          sourceFileName.replace(/\\\\/g, \"/\"),\n          code[sourceFileName],\n        );\n      }\n    }\n  }\n\n  /**\n   * Get the sourcemap.\n   */\n  get(): EncodedSourceMap {\n    return toEncodedMap(this._map);\n  }\n\n  getDecoded(): DecodedSourceMap {\n    return toDecodedMap(this._map);\n  }\n\n  getRawMappings(): Mapping[] {\n    return (this._rawMappings ||= allMappings(this._map));\n  }\n\n  /**\n   * Mark the current generated position with a source position. May also be passed null line/column\n   * values to insert a mapping to nothing.\n   */\n\n  mark(\n    generated: { line: number; column: number },\n    line: number,\n    column: number,\n    identifierName?: string | null,\n    identifierNamePos?: { line: number; column: number },\n    filename?: string | null,\n  ) {\n    this._rawMappings = undefined;\n\n    let originalMapping: {\n      source: string | null;\n      name?: string | null;\n      line: number | null;\n      column: number | null;\n    };\n\n    if (line != null) {\n      if (this._inputMap) {\n        // This is the lookup for this mark\n        originalMapping = originalPositionFor(this._inputMap, {\n          line,\n          column,\n        });\n\n        // If the we found a name, nothing else needs to be done\n        // Maybe we're marking a `(` and the input map already had a name attached there,\n        // or we're marking a `(` and the sourcemap spanned a `foo(`,\n        // or we're marking an identifier, etc.\n        if (!originalMapping.name && identifierNamePos) {\n          // We're trying to mark a `(` (as that's the only thing that provides\n          // an identifierNamePos currently), and we the AST had an identifier attached.\n          // Lookup it's original name.\n          const originalIdentifierMapping = originalPositionFor(\n            this._inputMap,\n            identifierNamePos,\n          );\n          if (originalIdentifierMapping.name) {\n            identifierName = originalIdentifierMapping.name;\n          }\n        }\n      } else {\n        originalMapping = {\n          source: filename?.replace(/\\\\/g, \"/\") || this._sourceFileName,\n          line: line,\n          column: column,\n        };\n      }\n    }\n\n    maybeAddMapping(this._map, {\n      name: identifierName,\n      generated,\n      source: originalMapping?.source,\n      original: originalMapping,\n    });\n  }\n}\n","import type SourceMap from \"./source-map.ts\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charcodes from \"charcodes\";\n\nexport type Pos = {\n  line: number;\n  column: number;\n};\nexport type Loc = {\n  start?: Pos;\n  end?: Pos;\n  filename?: string;\n};\ntype SourcePos = {\n  line: number | undefined;\n  column: number | undefined;\n  identifierName: string | undefined;\n  filename: string | undefined;\n};\ntype InternalSourcePos = SourcePos & { identifierNamePos: Pos };\n\ntype QueueItem = {\n  char: number;\n  repeat: number;\n  line: number | undefined;\n  column: number | undefined;\n  identifierName: undefined; // Not used, it always undefined.\n  identifierNamePos: undefined; // Not used, it always undefined.\n  filename: string | undefined;\n};\n\nexport default class Buffer {\n  constructor(map: SourceMap | null, indentChar: string) {\n    this._map = map;\n    this._indentChar = indentChar;\n\n    for (let i = 0; i < 64; i++) {\n      this._fastIndentations.push(indentChar.repeat(i));\n    }\n\n    this._allocQueue();\n  }\n\n  _map: SourceMap = null;\n  _buf = \"\";\n  _str = \"\";\n  _appendCount = 0;\n  _last = 0;\n  _queue: QueueItem[] = [];\n  _queueCursor = 0;\n  _canMarkIdName = true;\n  _indentChar = \"\";\n  _fastIndentations: string[] = [];\n\n  _position = {\n    line: 1,\n    column: 0,\n  };\n  _sourcePosition: InternalSourcePos = {\n    identifierName: undefined,\n    identifierNamePos: undefined,\n    line: undefined,\n    column: undefined,\n    filename: undefined,\n  };\n\n  _allocQueue() {\n    const queue = this._queue;\n\n    for (let i = 0; i < 16; i++) {\n      queue.push({\n        char: 0,\n        repeat: 1,\n        line: undefined,\n        column: undefined,\n        identifierName: undefined,\n        identifierNamePos: undefined,\n        filename: \"\",\n      });\n    }\n  }\n\n  _pushQueue(\n    char: number,\n    repeat: number,\n    line: number | undefined,\n    column: number | undefined,\n    filename: string | undefined,\n  ) {\n    const cursor = this._queueCursor;\n    if (cursor === this._queue.length) {\n      this._allocQueue();\n    }\n    const item = this._queue[cursor];\n    item.char = char;\n    item.repeat = repeat;\n    item.line = line;\n    item.column = column;\n    item.filename = filename;\n\n    this._queueCursor++;\n  }\n\n  _popQueue(): QueueItem {\n    if (this._queueCursor === 0) {\n      throw new Error(\"Cannot pop from empty queue\");\n    }\n    return this._queue[--this._queueCursor];\n  }\n\n  /**\n   * Get the final string output from the buffer, along with the sourcemap if one exists.\n   */\n\n  get() {\n    this._flush();\n\n    const map = this._map;\n    const result = {\n      // Whatever trim is used here should not execute a regex against the\n      // source string since it may be arbitrarily large after all transformations\n      code: (this._buf + this._str).trimRight(),\n      // Decoded sourcemap is free to generate.\n      decodedMap: map?.getDecoded(),\n      // Used as a marker for backwards compatibility. We moved input map merging\n      // into the generator. We cannot merge the input map a second time, so the\n      // presence of this field tells us we've already done the work.\n      get __mergedMap() {\n        return this.map;\n      },\n      // Encoding the sourcemap is moderately CPU expensive.\n      get map() {\n        const resultMap = map ? map.get() : null;\n        result.map = resultMap;\n        return resultMap;\n      },\n      set map(value) {\n        Object.defineProperty(result, \"map\", { value, writable: true });\n      },\n      // Retrieving the raw mappings is very memory intensive.\n      get rawMappings() {\n        const mappings = map?.getRawMappings();\n        result.rawMappings = mappings;\n        return mappings;\n      },\n      set rawMappings(value) {\n        Object.defineProperty(result, \"rawMappings\", { value, writable: true });\n      },\n    };\n\n    return result;\n  }\n\n  /**\n   * Add a string to the buffer that cannot be reverted.\n   */\n\n  append(str: string, maybeNewline: boolean): void {\n    this._flush();\n\n    this._append(str, this._sourcePosition, maybeNewline);\n  }\n\n  appendChar(char: number): void {\n    this._flush();\n    this._appendChar(char, 1, this._sourcePosition);\n  }\n\n  /**\n   * Add a string to the buffer than can be reverted.\n   */\n  queue(char: number): void {\n    // Drop trailing spaces when a newline is inserted.\n    if (char === charcodes.lineFeed) {\n      while (this._queueCursor !== 0) {\n        const char = this._queue[this._queueCursor - 1].char;\n        if (char !== charcodes.space && char !== charcodes.tab) {\n          break;\n        }\n\n        this._queueCursor--;\n      }\n    }\n\n    const sourcePosition = this._sourcePosition;\n    this._pushQueue(\n      char,\n      1,\n      sourcePosition.line,\n      sourcePosition.column,\n      sourcePosition.filename,\n    );\n  }\n\n  /**\n   * Same as queue, but this indentation will never have a sourcemap marker.\n   */\n  queueIndentation(repeat: number): void {\n    if (repeat === 0) return;\n    this._pushQueue(-1, repeat, undefined, undefined, undefined);\n  }\n\n  _flush(): void {\n    const queueCursor = this._queueCursor;\n    const queue = this._queue;\n    for (let i = 0; i < queueCursor; i++) {\n      const item: QueueItem = queue[i];\n      this._appendChar(item.char, item.repeat, item);\n    }\n    this._queueCursor = 0;\n  }\n\n  _appendChar(\n    char: number,\n    repeat: number,\n    sourcePos: InternalSourcePos,\n  ): void {\n    this._last = char;\n\n    if (char === -1) {\n      const fastIndentation = this._fastIndentations[repeat];\n      if (fastIndentation !== undefined) {\n        this._str += fastIndentation;\n      } else {\n        this._str +=\n          repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;\n      }\n    } else {\n      this._str +=\n        repeat > 1\n          ? String.fromCharCode(char).repeat(repeat)\n          : String.fromCharCode(char);\n    }\n\n    if (char !== charcodes.lineFeed) {\n      this._mark(\n        sourcePos.line,\n        sourcePos.column,\n        sourcePos.identifierName,\n        sourcePos.identifierNamePos,\n        sourcePos.filename,\n      );\n      this._position.column += repeat;\n    } else {\n      this._position.line++;\n      this._position.column = 0;\n    }\n\n    if (this._canMarkIdName) {\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n  }\n\n  _append(\n    str: string,\n    sourcePos: InternalSourcePos,\n    maybeNewline: boolean,\n  ): void {\n    const len = str.length;\n    const position = this._position;\n\n    this._last = str.charCodeAt(len - 1);\n\n    if (++this._appendCount > 4096) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      +this._str; // Unexplainable huge performance boost. Ref: https://github.com/davidmarkclements/flatstr License: MIT\n      this._buf += this._str;\n      this._str = str;\n      this._appendCount = 0;\n    } else {\n      this._str += str;\n    }\n\n    if (!maybeNewline && !this._map) {\n      position.column += len;\n      return;\n    }\n\n    const { column, identifierName, identifierNamePos, filename } = sourcePos;\n    let line = sourcePos.line;\n\n    if (\n      (identifierName != null || identifierNamePos != null) &&\n      this._canMarkIdName\n    ) {\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n\n    // Search for newline chars. We search only for `\\n`, since both `\\r` and\n    // `\\r\\n` are normalized to `\\n` during parse. We exclude `\\u2028` and\n    // `\\u2029` for performance reasons, they're so uncommon that it's probably\n    // ok. It's also unclear how other sourcemap utilities handle them...\n    let i = str.indexOf(\"\\n\");\n    let last = 0;\n\n    // If the string starts with a newline char, then adding a mark is redundant.\n    // This catches both \"no newlines\" and \"newline after several chars\".\n    if (i !== 0) {\n      this._mark(line, column, identifierName, identifierNamePos, filename);\n    }\n\n    // Now, find each remaining newline char in the string.\n    while (i !== -1) {\n      position.line++;\n      position.column = 0;\n      last = i + 1;\n\n      // We mark the start of each line, which happens directly after this newline char\n      // unless this is the last char.\n      // When manually adding multi-line content (such as a comment), `line` will be `undefined`.\n      if (last < len && line !== undefined) {\n        this._mark(++line, 0, null, null, filename);\n      }\n      i = str.indexOf(\"\\n\", last);\n    }\n    position.column += len - last;\n  }\n\n  _mark(\n    line: number | undefined,\n    column: number | undefined,\n    identifierName: string | undefined,\n    identifierNamePos: Pos | undefined,\n    filename: string | undefined,\n  ): void {\n    this._map?.mark(\n      this._position,\n      line,\n      column,\n      identifierName,\n      identifierNamePos,\n      filename,\n    );\n  }\n\n  removeTrailingNewline(): void {\n    const queueCursor = this._queueCursor;\n    if (\n      queueCursor !== 0 &&\n      this._queue[queueCursor - 1].char === charcodes.lineFeed\n    ) {\n      this._queueCursor--;\n    }\n  }\n\n  removeLastSemicolon(): void {\n    const queueCursor = this._queueCursor;\n    if (\n      queueCursor !== 0 &&\n      this._queue[queueCursor - 1].char === charcodes.semicolon\n    ) {\n      this._queueCursor--;\n    }\n  }\n\n  getLastChar(): number {\n    const queueCursor = this._queueCursor;\n    return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;\n  }\n\n  /**\n   * This will only detect at most 1 newline after a call to `flush()`,\n   * but this has not been found so far, and an accurate count can be achieved if needed later.\n   */\n  getNewlineCount(): number {\n    const queueCursor = this._queueCursor;\n    let count = 0;\n    if (queueCursor === 0) return this._last === charcodes.lineFeed ? 1 : 0;\n    for (let i = queueCursor - 1; i >= 0; i--) {\n      if (this._queue[i].char !== charcodes.lineFeed) {\n        break;\n      }\n      count++;\n    }\n    return count === queueCursor && this._last === charcodes.lineFeed\n      ? count + 1\n      : count;\n  }\n\n  /**\n   * check if current _last + queue ends with newline, return the character before newline\n   */\n  endsWithCharAndNewline(): number {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0) {\n      // every element in queue is one-length whitespace string\n      const lastCp = queue[queueCursor - 1].char;\n      if (lastCp !== charcodes.lineFeed) return;\n      if (queueCursor > 1) {\n        return queue[queueCursor - 2].char;\n      } else {\n        return this._last;\n      }\n    }\n    // We assume that everything being matched is at most a single token plus some whitespace,\n    // which everything currently is, but otherwise we'd have to expand _last or check _buf.\n  }\n\n  hasContent(): boolean {\n    return this._queueCursor !== 0 || !!this._last;\n  }\n\n  /**\n   * Certain sourcemap usecases expect mappings to be more accurate than\n   * Babel's generic sourcemap handling allows. For now, we special-case\n   * identifiers to allow for the primary cases to work.\n   * The goal of this line is to ensure that the map output from Babel will\n   * have an exact range on identifiers in the output code. Without this\n   * line, Babel would potentially include some number of trailing tokens\n   * that are printed after the identifier, but before another location has\n   * been assigned.\n   * This allows tooling like Rollup and Webpack to more accurately perform\n   * their own transformations. Most importantly, this allows the import/export\n   * transformations performed by those tools to loose less information when\n   * applying their own transformations on top of the code and map results\n   * generated by Babel itself.\n   *\n   * The primary example of this is the snippet:\n   *\n   *   import mod from \"mod\";\n   *   mod();\n   *\n   * With this line, there will be one mapping range over \"mod\" and another\n   * over \"();\", where previously it would have been a single mapping.\n   */\n  exactSource(loc: Loc | undefined, cb: () => void) {\n    if (!this._map) {\n      cb();\n      return;\n    }\n\n    this.source(\"start\", loc);\n    // @ts-expect-error identifierName is not defined\n    const identifierName = loc.identifierName;\n    const sourcePos = this._sourcePosition;\n    if (identifierName) {\n      this._canMarkIdName = false;\n      sourcePos.identifierName = identifierName;\n    }\n    cb();\n\n    if (identifierName) {\n      this._canMarkIdName = true;\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n    this.source(\"end\", loc);\n  }\n\n  /**\n   * Sets a given position as the current source location so generated code after this call\n   * will be given this position in the sourcemap.\n   */\n\n  source(prop: \"start\" | \"end\", loc: Loc | undefined): void {\n    if (!this._map) return;\n\n    // Since this is called extremely often, we reuse the same _sourcePosition\n    // object for the whole lifetime of the buffer.\n    this._normalizePosition(prop, loc, 0);\n  }\n\n  sourceWithOffset(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    columnOffset: number,\n  ): void {\n    if (!this._map) return;\n\n    this._normalizePosition(prop, loc, columnOffset);\n  }\n\n  _normalizePosition(prop: \"start\" | \"end\", loc: Loc, columnOffset: number) {\n    const pos = loc[prop];\n    const target = this._sourcePosition;\n\n    if (pos) {\n      target.line = pos.line;\n      // TODO: Fix https://github.com/babel/babel/issues/15712 in downstream\n      target.column = Math.max(pos.column + columnOffset, 0);\n      target.filename = loc.filename;\n    }\n  }\n\n  getCurrentColumn(): number {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n\n    let lastIndex = -1;\n    let len = 0;\n    for (let i = 0; i < queueCursor; i++) {\n      const item = queue[i];\n      if (item.char === charcodes.lineFeed) {\n        lastIndex = len;\n      }\n      len += item.repeat;\n    }\n\n    return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;\n  }\n\n  getCurrentLine(): number {\n    let count = 0;\n\n    const queue = this._queue;\n    for (let i = 0; i < this._queueCursor; i++) {\n      if (queue[i].char === charcodes.lineFeed) {\n        count++;\n      }\n    }\n\n    return this._position.line + count;\n  }\n}\n","import {\n  FLIPPED_ALIAS_KEYS,\n  isArrayExpression,\n  isAssignmentExpression,\n  isBinary,\n  isBlockStatement,\n  isCallExpression,\n  isFunction,\n  isIdentifier,\n  isLiteral,\n  isMemberExpression,\n  isObjectExpression,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isStringLiteral,\n} from \"@babel/types\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\nimport type { NodeHandlers } from \"./index.ts\";\n\nimport type * as t from \"@babel/types\";\n\nconst enum WhitespaceFlag {\n  before = 1 << 0,\n  after = 1 << 1,\n}\n\nexport type { WhitespaceFlag };\n\nfunction crawlInternal(\n  node: t.Node,\n  state: { hasCall: boolean; hasFunction: boolean; hasHelper: boolean },\n) {\n  if (!node) return state;\n\n  if (isMemberExpression(node) || isOptionalMemberExpression(node)) {\n    crawlInternal(node.object, state);\n    if (node.computed) crawlInternal(node.property, state);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    crawlInternal(node.left, state);\n    crawlInternal(node.right, state);\n  } else if (isCallExpression(node) || isOptionalCallExpression(node)) {\n    state.hasCall = true;\n    crawlInternal(node.callee, state);\n  } else if (isFunction(node)) {\n    state.hasFunction = true;\n  } else if (isIdentifier(node)) {\n    state.hasHelper =\n      // @ts-expect-error todo(flow->ts): node.callee is not really expected here…\n      state.hasHelper || (node.callee && isHelper(node.callee));\n  }\n\n  return state;\n}\n\n/**\n * Crawl a node to test if it contains a CallExpression, a Function, or a Helper.\n *\n * @example\n * crawl(node)\n * // { hasCall: false, hasFunction: true, hasHelper: false }\n */\n\nfunction crawl(node: t.Node) {\n  return crawlInternal(node, {\n    hasCall: false,\n    hasFunction: false,\n    hasHelper: false,\n  });\n}\n\n/**\n * Test if a node is or has a helper.\n */\n\nfunction isHelper(node: t.Node): boolean {\n  if (!node) return false;\n\n  if (isMemberExpression(node)) {\n    return isHelper(node.object) || isHelper(node.property);\n  } else if (isIdentifier(node)) {\n    return (\n      node.name === \"require\" ||\n      node.name.charCodeAt(0) === charCodes.underscore\n    );\n  } else if (isCallExpression(node)) {\n    return isHelper(node.callee);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    return (\n      (isIdentifier(node.left) && isHelper(node.left)) || isHelper(node.right)\n    );\n  } else {\n    return false;\n  }\n}\n\nfunction isType(node: t.Node) {\n  return (\n    isLiteral(node) ||\n    isObjectExpression(node) ||\n    isArrayExpression(node) ||\n    isIdentifier(node) ||\n    isMemberExpression(node)\n  );\n}\n\n/**\n * Tests for node types that need whitespace.\n */\n\nexport const nodes: NodeHandlers<WhitespaceFlag> = {\n  /**\n   * Test if AssignmentExpression needs whitespace.\n   */\n\n  AssignmentExpression(node: t.AssignmentExpression): WhitespaceFlag {\n    const state = crawl(node.right);\n    if ((state.hasCall && state.hasHelper) || state.hasFunction) {\n      return state.hasFunction\n        ? WhitespaceFlag.before | WhitespaceFlag.after\n        : WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if SwitchCase needs whitespace.\n   */\n\n  SwitchCase(node: t.SwitchCase, parent: t.SwitchStatement): WhitespaceFlag {\n    return (\n      (!!node.consequent.length || parent.cases[0] === node\n        ? WhitespaceFlag.before\n        : 0) |\n      (!node.consequent.length && parent.cases[parent.cases.length - 1] === node\n        ? WhitespaceFlag.after\n        : 0)\n    );\n  },\n\n  /**\n   * Test if LogicalExpression needs whitespace.\n   */\n\n  LogicalExpression(node: t.LogicalExpression): WhitespaceFlag {\n    if (isFunction(node.left) || isFunction(node.right)) {\n      return WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if Literal needs whitespace.\n   */\n\n  Literal(node: t.Literal): WhitespaceFlag {\n    if (isStringLiteral(node) && node.value === \"use strict\") {\n      return WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if CallExpressionish needs whitespace.\n   */\n\n  CallExpression(node: t.CallExpression): WhitespaceFlag {\n    if (isFunction(node.callee) || isHelper(node)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n\n  OptionalCallExpression(node: t.OptionalCallExpression): WhitespaceFlag {\n    if (isFunction(node.callee)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if VariableDeclaration needs whitespace.\n   */\n\n  VariableDeclaration(node: t.VariableDeclaration): WhitespaceFlag {\n    for (let i = 0; i < node.declarations.length; i++) {\n      const declar = node.declarations[i];\n\n      let enabled = isHelper(declar.id) && !isType(declar.init);\n      if (!enabled && declar.init) {\n        const state = crawl(declar.init);\n        enabled = (isHelper(declar.init) && state.hasCall) || state.hasFunction;\n      }\n\n      if (enabled) {\n        return WhitespaceFlag.before | WhitespaceFlag.after;\n      }\n    }\n  },\n\n  /**\n   * Test if IfStatement needs whitespace.\n   */\n\n  IfStatement(node: t.IfStatement): WhitespaceFlag {\n    if (isBlockStatement(node.consequent)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n};\n\n/**\n * Test if Property needs whitespace.\n */\n\nnodes.ObjectProperty =\n  nodes.ObjectTypeProperty =\n  nodes.ObjectMethod =\n    function (\n      node: t.ObjectProperty | t.ObjectTypeProperty | t.ObjectMethod,\n      parent: t.ObjectExpression,\n    ): WhitespaceFlag {\n      if (parent.properties[0] === node) {\n        return WhitespaceFlag.before;\n      }\n    };\n\nnodes.ObjectTypeCallProperty = function (\n  node: t.ObjectTypeCallProperty,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (parent.callProperties[0] === node && !parent.properties?.length) {\n    return WhitespaceFlag.before;\n  }\n};\n\nnodes.ObjectTypeIndexer = function (\n  node: t.ObjectTypeIndexer,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (\n    parent.indexers[0] === node &&\n    !parent.properties?.length &&\n    !parent.callProperties?.length\n  ) {\n    return WhitespaceFlag.before;\n  }\n};\n\nnodes.ObjectTypeInternalSlot = function (\n  node: t.ObjectTypeInternalSlot,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (\n    parent.internalSlots[0] === node &&\n    !parent.properties?.length &&\n    !parent.callProperties?.length &&\n    !parent.indexers?.length\n  ) {\n    return WhitespaceFlag.before;\n  }\n};\n\n/**\n * Add whitespace tests for nodes and their aliases.\n */\n\n(\n  [\n    [\"Function\", true],\n    [\"Class\", true],\n    [\"Loop\", true],\n    [\"LabeledStatement\", true],\n    [\"SwitchStatement\", true],\n    [\"TryStatement\", true],\n  ] as const\n).forEach(function ([type, amounts]) {\n  [type as string]\n    .concat(FLIPPED_ALIAS_KEYS[type] || [])\n    .forEach(function (type) {\n      const ret = amounts ? WhitespaceFlag.before | WhitespaceFlag.after : 0;\n      nodes[type] = () => ret;\n    });\n});\n","import {\n  isArrayTypeAnnotation,\n  isBinaryExpression,\n  isCallExpression,\n  isExportDeclaration,\n  isForOfStatement,\n  isIndexedAccessType,\n  isMemberExpression,\n  isObjectPattern,\n  isOptionalMemberExpression,\n  isYieldExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nimport { TokenContext } from \"./index.ts\";\n\nconst PRECEDENCE = new Map([\n  [\"||\", 0],\n  [\"??\", 0],\n  [\"|>\", 0],\n  [\"&&\", 1],\n  [\"|\", 2],\n  [\"^\", 3],\n  [\"&\", 4],\n  [\"==\", 5],\n  [\"===\", 5],\n  [\"!=\", 5],\n  [\"!==\", 5],\n  [\"<\", 6],\n  [\">\", 6],\n  [\"<=\", 6],\n  [\">=\", 6],\n  [\"in\", 6],\n  [\"instanceof\", 6],\n  [\">>\", 7],\n  [\"<<\", 7],\n  [\">>>\", 7],\n  [\"+\", 8],\n  [\"-\", 8],\n  [\"*\", 9],\n  [\"/\", 9],\n  [\"%\", 9],\n  [\"**\", 10],\n]);\n\nfunction getBinaryPrecedence(\n  node: t.Binary | t.TSAsExpression | t.TSSatisfiesExpression,\n  nodeType: string,\n): number;\nfunction getBinaryPrecedence(\n  node: t.Node,\n  nodeType: string,\n): number | undefined;\nfunction getBinaryPrecedence(node: t.Node, nodeType: string) {\n  if (nodeType === \"BinaryExpression\" || nodeType === \"LogicalExpression\") {\n    return PRECEDENCE.get((node as t.Binary).operator);\n  }\n  if (nodeType === \"TSAsExpression\" || nodeType === \"TSSatisfiesExpression\") {\n    return PRECEDENCE.get(\"in\");\n  }\n}\n\nfunction isTSTypeExpression(nodeType: string) {\n  return (\n    nodeType === \"TSAsExpression\" ||\n    nodeType === \"TSSatisfiesExpression\" ||\n    nodeType === \"TSTypeAssertion\"\n  );\n}\n\nconst isClassExtendsClause = (\n  node: t.Node,\n  parent: t.Node,\n): parent is t.Class => {\n  const parentType = parent.type;\n  return (\n    (parentType === \"ClassDeclaration\" || parentType === \"ClassExpression\") &&\n    parent.superClass === node\n  );\n};\n\nconst hasPostfixPart = (node: t.Node, parent: t.Node) => {\n  const parentType = parent.type;\n  return (\n    ((parentType === \"MemberExpression\" ||\n      parentType === \"OptionalMemberExpression\") &&\n      parent.object === node) ||\n    ((parentType === \"CallExpression\" ||\n      parentType === \"OptionalCallExpression\" ||\n      parentType === \"NewExpression\") &&\n      parent.callee === node) ||\n    (parentType === \"TaggedTemplateExpression\" && parent.tag === node) ||\n    parentType === \"TSNonNullExpression\"\n  );\n};\n\nexport function NullableTypeAnnotation(\n  node: t.NullableTypeAnnotation,\n  parent: t.Node,\n): boolean {\n  return isArrayTypeAnnotation(parent);\n}\n\nexport function FunctionTypeAnnotation(\n  node: t.FunctionTypeAnnotation,\n  parent: t.Node,\n  tokenContext: number,\n): boolean {\n  const parentType = parent.type;\n  return (\n    // (() => A) | (() => B)\n    parentType === \"UnionTypeAnnotation\" ||\n    // (() => A) & (() => B)\n    parentType === \"IntersectionTypeAnnotation\" ||\n    // (() => A)[]\n    parentType === \"ArrayTypeAnnotation\" ||\n    Boolean(tokenContext & TokenContext.arrowFlowReturnType)\n  );\n}\n\nexport function UpdateExpression(\n  node: t.UpdateExpression,\n  parent: t.Node,\n): boolean {\n  return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);\n}\n\nexport function ObjectExpression(\n  node: t.ObjectExpression,\n  parent: t.Node,\n  tokenContext: number,\n): boolean {\n  return Boolean(\n    tokenContext & (TokenContext.expressionStatement | TokenContext.arrowBody),\n  );\n}\n\nexport function DoExpression(\n  node: t.DoExpression,\n  parent: t.Node,\n  tokenContext: number,\n): boolean {\n  // `async do` can start an expression statement\n  return (\n    !node.async && Boolean(tokenContext & TokenContext.expressionStatement)\n  );\n}\n\nexport function Binary(\n  node: t.Binary | t.TSAsExpression | t.TSSatisfiesExpression,\n  parent: t.Node,\n): boolean | undefined {\n  const parentType = parent.type;\n  if (\n    node.type === \"BinaryExpression\" &&\n    node.operator === \"**\" &&\n    parentType === \"BinaryExpression\" &&\n    parent.operator === \"**\"\n  ) {\n    return parent.left === node;\n  }\n\n  if (isClassExtendsClause(node, parent)) {\n    return true;\n  }\n\n  if (\n    hasPostfixPart(node, parent) ||\n    parentType === \"UnaryExpression\" ||\n    parentType === \"SpreadElement\" ||\n    parentType === \"AwaitExpression\"\n  ) {\n    return true;\n  }\n\n  const parentPos = getBinaryPrecedence(parent, parentType);\n  if (parentPos != null) {\n    const nodePos = getBinaryPrecedence(node, node.type);\n    if (\n      // Logical expressions with the same precedence don't need parens.\n      (parentPos === nodePos &&\n        parentType === \"BinaryExpression\" &&\n        parent.right === node) ||\n      parentPos > nodePos\n    ) {\n      return true;\n    }\n  }\n\n  return undefined;\n}\n\nexport function UnionTypeAnnotation(\n  node: t.UnionTypeAnnotation,\n  parent: t.Node,\n): boolean {\n  const parentType = parent.type;\n  return (\n    parentType === \"ArrayTypeAnnotation\" ||\n    parentType === \"NullableTypeAnnotation\" ||\n    parentType === \"IntersectionTypeAnnotation\" ||\n    parentType === \"UnionTypeAnnotation\"\n  );\n}\n\nexport { UnionTypeAnnotation as IntersectionTypeAnnotation };\n\nexport function OptionalIndexedAccessType(\n  node: t.OptionalIndexedAccessType,\n  parent: t.Node,\n): boolean {\n  return isIndexedAccessType(parent) && parent.objectType === node;\n}\n\nexport function TSAsExpression(\n  node: t.TSAsExpression | t.TSSatisfiesExpression,\n  parent: t.Node,\n): boolean {\n  if (\n    (parent.type === \"AssignmentExpression\" ||\n      parent.type === \"AssignmentPattern\") &&\n    parent.left === node\n  ) {\n    return true;\n  }\n  if (\n    parent.type === \"BinaryExpression\" &&\n    (parent.operator === \"|\" || parent.operator === \"&\") &&\n    node === parent.left\n  ) {\n    return true;\n  }\n  return Binary(node, parent);\n}\n\nexport { TSAsExpression as TSSatisfiesExpression };\n\nexport { UnaryLike as TSTypeAssertion };\n\nexport function TSUnionType(node: t.TSUnionType, parent: t.Node): boolean {\n  const parentType = parent.type;\n  return (\n    parentType === \"TSArrayType\" ||\n    parentType === \"TSOptionalType\" ||\n    parentType === \"TSIntersectionType\" ||\n    parentType === \"TSUnionType\" ||\n    parentType === \"TSRestType\"\n  );\n}\n\nexport { TSUnionType as TSIntersectionType };\n\nexport function TSInferType(node: t.TSInferType, parent: t.Node): boolean {\n  const parentType = parent.type;\n  return parentType === \"TSArrayType\" || parentType === \"TSOptionalType\";\n}\n\nexport function TSInstantiationExpression(\n  node: t.TSInstantiationExpression,\n  parent: t.Node,\n) {\n  const parentType = parent.type;\n  return (\n    (parentType === \"CallExpression\" ||\n      parentType === \"OptionalCallExpression\" ||\n      parentType === \"NewExpression\" ||\n      parentType === \"TSInstantiationExpression\") &&\n    !!parent.typeParameters\n  );\n}\n\nexport function BinaryExpression(\n  node: t.BinaryExpression,\n  parent: t.Node,\n  tokenContext: unknown,\n  inForStatementInit: boolean,\n): boolean {\n  // for ((1 in []);;);\n  // for (var x = (1 in []) in 2);\n  return node.operator === \"in\" && inForStatementInit;\n}\n\nexport function SequenceExpression(\n  node: t.SequenceExpression,\n  parent: t.Node,\n): boolean {\n  const parentType = parent.type;\n  if (\n    // Although parentheses wouldn't hurt around sequence\n    // expressions in the head of for loops, traditional style\n    // dictates that e.g. i++, j++ should not be wrapped with\n    // parentheses.\n    parentType === \"ForStatement\" ||\n    parentType === \"ThrowStatement\" ||\n    parentType === \"ReturnStatement\" ||\n    (parentType === \"IfStatement\" && parent.test === node) ||\n    (parentType === \"WhileStatement\" && parent.test === node) ||\n    (parentType === \"ForInStatement\" && parent.right === node) ||\n    (parentType === \"SwitchStatement\" && parent.discriminant === node) ||\n    (parentType === \"ExpressionStatement\" && parent.expression === node)\n  ) {\n    return false;\n  }\n\n  // Otherwise err on the side of overparenthesization, adding\n  // explicit exceptions above if this proves overzealous.\n  return true;\n}\n\nexport function YieldExpression(\n  node: t.YieldExpression,\n  parent: t.Node,\n): boolean {\n  const parentType = parent.type;\n  return (\n    parentType === \"BinaryExpression\" ||\n    parentType === \"LogicalExpression\" ||\n    parentType === \"UnaryExpression\" ||\n    parentType === \"SpreadElement\" ||\n    hasPostfixPart(node, parent) ||\n    (parentType === \"AwaitExpression\" && isYieldExpression(node)) ||\n    (parentType === \"ConditionalExpression\" && node === parent.test) ||\n    isClassExtendsClause(node, parent) ||\n    isTSTypeExpression(parentType)\n  );\n}\n\nexport { YieldExpression as AwaitExpression };\n\nexport function ClassExpression(\n  node: t.ClassExpression,\n  parent: t.Node,\n  tokenContext: number,\n): boolean {\n  return Boolean(\n    tokenContext &\n      (TokenContext.expressionStatement | TokenContext.exportDefault),\n  );\n}\n\nexport function UnaryLike(\n  node:\n    | t.UnaryLike\n    | t.TSTypeAssertion\n    | t.ArrowFunctionExpression\n    | t.ConditionalExpression\n    | t.AssignmentExpression,\n  parent: t.Node,\n): boolean {\n  return (\n    hasPostfixPart(node, parent) ||\n    (isBinaryExpression(parent) &&\n      parent.operator === \"**\" &&\n      parent.left === node) ||\n    isClassExtendsClause(node, parent)\n  );\n}\n\nexport function FunctionExpression(\n  node: t.FunctionExpression,\n  parent: t.Node,\n  tokenContext: number,\n): boolean {\n  return Boolean(\n    tokenContext &\n      (TokenContext.expressionStatement | TokenContext.exportDefault),\n  );\n}\n\nexport function ArrowFunctionExpression(\n  node: t.ArrowFunctionExpression,\n  parent: t.Node,\n): boolean {\n  return isExportDeclaration(parent) || ConditionalExpression(node, parent);\n}\n\nexport function ConditionalExpression(\n  node:\n    | t.ConditionalExpression\n    | t.ArrowFunctionExpression\n    | t.AssignmentExpression,\n  parent?: t.Node,\n): boolean {\n  const parentType = parent.type;\n  if (\n    parentType === \"UnaryExpression\" ||\n    parentType === \"SpreadElement\" ||\n    parentType === \"BinaryExpression\" ||\n    parentType === \"LogicalExpression\" ||\n    (parentType === \"ConditionalExpression\" && parent.test === node) ||\n    parentType === \"AwaitExpression\" ||\n    isTSTypeExpression(parentType)\n  ) {\n    return true;\n  }\n\n  return UnaryLike(node, parent);\n}\n\nexport function OptionalMemberExpression(\n  node: t.OptionalMemberExpression,\n  parent: t.Node,\n): boolean {\n  return (\n    (isCallExpression(parent) && parent.callee === node) ||\n    (isMemberExpression(parent) && parent.object === node)\n  );\n}\n\nexport { OptionalMemberExpression as OptionalCallExpression };\n\nexport function AssignmentExpression(\n  node: t.AssignmentExpression,\n  parent: t.Node,\n): boolean {\n  if (isObjectPattern(node.left)) {\n    return true;\n  } else {\n    return ConditionalExpression(node, parent);\n  }\n}\n\nexport function LogicalExpression(\n  node: t.LogicalExpression,\n  parent: t.Node,\n): boolean {\n  const parentType = parent.type;\n  if (isTSTypeExpression(parentType)) return true;\n  if (parentType !== \"LogicalExpression\") return false;\n  switch (node.operator) {\n    case \"||\":\n      return parent.operator === \"??\" || parent.operator === \"&&\";\n    case \"&&\":\n      return parent.operator === \"??\";\n    case \"??\":\n      return parent.operator !== \"??\";\n  }\n}\n\nexport function Identifier(\n  node: t.Identifier,\n  parent: t.Node,\n  tokenContext: number,\n): boolean {\n  const parentType = parent.type;\n  // 13.15.2 AssignmentExpression RS: Evaluation\n  // (fn) = function () {};\n  if (\n    node.extra?.parenthesized &&\n    parentType === \"AssignmentExpression\" &&\n    parent.left === node\n  ) {\n    const rightType = parent.right.type;\n    if (\n      (rightType === \"FunctionExpression\" || rightType === \"ClassExpression\") &&\n      parent.right.id == null\n    ) {\n      return true;\n    }\n  }\n  // Non-strict code allows the identifier `let`, but it cannot occur as-is in\n  // certain contexts to avoid ambiguity with contextual keyword `let`.\n  if (node.name === \"let\") {\n    // Some contexts only forbid `let [`, so check if the next token would\n    // be the left bracket of a computed member expression.\n    const isFollowedByBracket =\n      isMemberExpression(parent, {\n        object: node,\n        computed: true,\n      }) ||\n      isOptionalMemberExpression(parent, {\n        object: node,\n        computed: true,\n        optional: false,\n      });\n    if (\n      isFollowedByBracket &&\n      tokenContext &\n        (TokenContext.expressionStatement |\n          TokenContext.forHead |\n          TokenContext.forInHead)\n    ) {\n      return true;\n    }\n    return Boolean(tokenContext & TokenContext.forOfHead);\n  }\n\n  // ECMAScript specifically forbids a for-of loop from starting with the\n  // token sequence `for (async of`, because it would be ambiguous with\n  // `for (async of => {};;)`, so we need to add extra parentheses.\n  return (\n    node.name === \"async\" &&\n    isForOfStatement(parent, { left: node, await: false })\n  );\n}\n","import * as whitespace from \"./whitespace.ts\";\nimport * as parens from \"./parentheses.ts\";\nimport {\n  FLIPPED_ALIAS_KEYS,\n  isCallExpression,\n  isDecorator,\n  isExpressionStatement,\n  isMemberExpression,\n  isNewExpression,\n  isParenthesizedExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nimport type { WhitespaceFlag } from \"./whitespace.ts\";\n\nexport const enum TokenContext {\n  expressionStatement = 1 << 0,\n  arrowBody = 1 << 1,\n  exportDefault = 1 << 2,\n  forHead = 1 << 3,\n  forInHead = 1 << 4,\n  forOfHead = 1 << 5,\n  arrowFlowReturnType = 1 << 6,\n}\n\ntype NodeHandler<R> = (\n  node: t.Node,\n  // todo:\n  // node: K extends keyof typeof t\n  //   ? Extract<typeof t[K], { type: \"string\" }>\n  //   : t.Node,\n  parent: t.Node,\n  tokenContext?: number,\n  inForStatementInit?: boolean,\n) => R;\n\nexport type NodeHandlers<R> = {\n  [K in string]?: NodeHandler<R>;\n};\n\nfunction expandAliases<R>(obj: NodeHandlers<R>) {\n  const map = new Map<string, NodeHandler<R>>();\n\n  function add(type: string, func: NodeHandler<R>) {\n    const fn = map.get(type);\n    map.set(\n      type,\n      fn\n        ? function (node, parent, stack, inForInit) {\n            return (\n              fn(node, parent, stack, inForInit) ??\n              func(node, parent, stack, inForInit)\n            );\n          }\n        : func,\n    );\n  }\n\n  for (const type of Object.keys(obj)) {\n    const aliases = FLIPPED_ALIAS_KEYS[type];\n    if (aliases) {\n      for (const alias of aliases) {\n        add(alias, obj[type]);\n      }\n    } else {\n      add(type, obj[type]);\n    }\n  }\n\n  return map;\n}\n\n// Rather than using `t.is` on each object property, we pre-expand any type aliases\n// into concrete types so that the 'find' call below can be as fast as possible.\nconst expandedParens = expandAliases(parens);\nconst expandedWhitespaceNodes = expandAliases(whitespace.nodes);\n\nfunction isOrHasCallExpression(node: t.Node): boolean {\n  if (isCallExpression(node)) {\n    return true;\n  }\n\n  return isMemberExpression(node) && isOrHasCallExpression(node.object);\n}\n\nexport function needsWhitespace(\n  node: t.Node,\n  parent: t.Node,\n  type: WhitespaceFlag,\n): boolean {\n  if (!node) return false;\n\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  const flag = expandedWhitespaceNodes.get(node.type)?.(node, parent);\n\n  if (typeof flag === \"number\") {\n    return (flag & type) !== 0;\n  }\n\n  return false;\n}\n\nexport function needsWhitespaceBefore(node: t.Node, parent: t.Node) {\n  return needsWhitespace(node, parent, 1);\n}\n\nexport function needsWhitespaceAfter(node: t.Node, parent: t.Node) {\n  return needsWhitespace(node, parent, 2);\n}\n\nexport function needsParens(\n  node: t.Node,\n  parent: t.Node,\n  tokenContext?: number,\n  inForInit?: boolean,\n) {\n  if (!parent) return false;\n\n  if (isNewExpression(parent) && parent.callee === node) {\n    if (isOrHasCallExpression(node)) return true;\n  }\n\n  if (isDecorator(parent)) {\n    return (\n      !isDecoratorMemberExpression(node) &&\n      !(isCallExpression(node) && isDecoratorMemberExpression(node.callee)) &&\n      !isParenthesizedExpression(node)\n    );\n  }\n\n  return expandedParens.get(node.type)?.(node, parent, tokenContext, inForInit);\n}\n\nfunction isDecoratorMemberExpression(node: t.Node): boolean {\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return (\n        !node.computed &&\n        node.property.type === \"Identifier\" &&\n        isDecoratorMemberExpression(node.object)\n      );\n    default:\n      return false;\n  }\n}\n","import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function TaggedTemplateExpression(\n  this: Printer,\n  node: t.TaggedTemplateExpression,\n) {\n  this.print(node.tag, node);\n  this.print(node.typeParameters, node); // TS\n  this.print(node.quasi, node);\n}\n\nexport function TemplateElement(this: Printer) {\n  throw new Error(\"TemplateElement printing is handled in TemplateLiteral\");\n}\n\nexport function TemplateLiteral(this: Printer, node: t.TemplateLiteral) {\n  const quasis = node.quasis;\n\n  let partRaw = \"`\";\n\n  for (let i = 0; i < quasis.length; i++) {\n    partRaw += quasis[i].value.raw;\n\n    if (i + 1 < quasis.length) {\n      this.token(partRaw + \"${\", true);\n      this.print(node.expressions[i], node);\n      partRaw = \"}\";\n    }\n  }\n\n  this.token(partRaw + \"`\", true);\n}\n","import type Printer from \"../printer.ts\";\nimport {\n  isCallExpression,\n  isLiteral,\n  isMemberExpression,\n  isNewExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { TokenContext } from \"../node/index.ts\";\n\nexport function UnaryExpression(this: Printer, node: t.UnaryExpression) {\n  const { operator } = node;\n  if (\n    operator === \"void\" ||\n    operator === \"delete\" ||\n    operator === \"typeof\" ||\n    // throwExpressions\n    operator === \"throw\"\n  ) {\n    this.word(operator);\n    this.space();\n  } else {\n    this.token(operator);\n  }\n\n  this.print(node.argument, node);\n}\n\nexport function DoExpression(this: Printer, node: t.DoExpression) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ParenthesizedExpression(\n  this: Printer,\n  node: t.ParenthesizedExpression,\n) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.rightParens(node);\n}\n\nexport function UpdateExpression(this: Printer, node: t.UpdateExpression) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument, node);\n  } else {\n    this.printTerminatorless(node.argument, node, true);\n    this.token(node.operator);\n  }\n}\n\nexport function ConditionalExpression(\n  this: Printer,\n  node: t.ConditionalExpression,\n) {\n  this.print(node.test, node);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.consequent, node);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.alternate, node);\n}\n\nexport function NewExpression(\n  this: Printer,\n  node: t.NewExpression,\n  parent: t.Node,\n) {\n  this.word(\"new\");\n  this.space();\n  this.print(node.callee, node);\n  if (\n    this.format.minified &&\n    node.arguments.length === 0 &&\n    !node.optional &&\n    !isCallExpression(parent, { callee: node }) &&\n    !isMemberExpression(parent) &&\n    !isNewExpression(parent)\n  ) {\n    return;\n  }\n\n  this.print(node.typeArguments, node); // Flow\n  this.print(node.typeParameters, node); // TS\n\n  if (node.optional) {\n    // TODO: This can never happen\n    this.token(\"?.\");\n  }\n  this.token(\"(\");\n  const exit = this.enterForStatementInit(false);\n  this.printList(node.arguments, node);\n  exit();\n  this.rightParens(node);\n}\n\nexport function SequenceExpression(this: Printer, node: t.SequenceExpression) {\n  this.printList(node.expressions, node);\n}\n\nexport function ThisExpression(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function Super(this: Printer) {\n  this.word(\"super\");\n}\n\nexport function _shouldPrintDecoratorsBeforeExport(\n  this: Printer,\n  node: t.ExportDeclaration & { declaration: t.ClassDeclaration },\n) {\n  if (typeof this.format.decoratorsBeforeExport === \"boolean\") {\n    return this.format.decoratorsBeforeExport;\n  }\n  return (\n    typeof node.start === \"number\" && node.start === node.declaration.start\n  );\n}\n\nexport function Decorator(this: Printer, node: t.Decorator) {\n  this.token(\"@\");\n  this.print(node.expression, node);\n  this.newline();\n}\n\nexport function OptionalMemberExpression(\n  this: Printer,\n  node: t.OptionalMemberExpression,\n) {\n  let { computed } = node;\n  const { optional, property } = node;\n\n  this.print(node.object, node);\n\n  if (!computed && isMemberExpression(property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  // @ts-expect-error todo(flow->ts) maybe instead of typeof check specific literal types?\n  if (isLiteral(property) && typeof property.value === \"number\") {\n    computed = true;\n  }\n  if (optional) {\n    this.token(\"?.\");\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(property, node);\n    this.token(\"]\");\n  } else {\n    if (!optional) {\n      this.token(\".\");\n    }\n    this.print(property, node);\n  }\n}\n\nexport function OptionalCallExpression(\n  this: Printer,\n  node: t.OptionalCallExpression,\n) {\n  this.print(node.callee, node);\n\n  this.print(node.typeParameters, node); // TS\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.print(node.typeArguments, node); // Flow\n\n  this.token(\"(\");\n  const exit = this.enterForStatementInit(false);\n  this.printList(node.arguments, node);\n  exit();\n  this.rightParens(node);\n}\n\nexport function CallExpression(this: Printer, node: t.CallExpression) {\n  this.print(node.callee, node);\n\n  this.print(node.typeArguments, node); // Flow\n  this.print(node.typeParameters, node); // TS\n  this.token(\"(\");\n  const exit = this.enterForStatementInit(false);\n  this.printList(node.arguments, node);\n  exit();\n  this.rightParens(node);\n}\n\nexport function Import(this: Printer) {\n  this.word(\"import\");\n}\n\nexport function AwaitExpression(this: Printer, node: t.AwaitExpression) {\n  this.word(\"await\");\n\n  if (node.argument) {\n    this.space();\n    this.printTerminatorless(node.argument, node, false);\n  }\n}\n\nexport function YieldExpression(this: Printer, node: t.YieldExpression) {\n  this.word(\"yield\", true);\n\n  if (node.delegate) {\n    this.token(\"*\");\n    if (node.argument) {\n      this.space();\n      // line terminators are allowed after yield*\n      this.print(node.argument, node);\n    }\n  } else {\n    if (node.argument) {\n      this.space();\n      this.printTerminatorless(node.argument, node, false);\n    }\n  }\n}\n\nexport function EmptyStatement(this: Printer) {\n  this.semicolon(true /* force */);\n}\n\nexport function ExpressionStatement(\n  this: Printer,\n  node: t.ExpressionStatement,\n) {\n  this.tokenContext |= TokenContext.expressionStatement;\n  this.print(node.expression, node);\n  this.semicolon();\n}\n\nexport function AssignmentPattern(this: Printer, node: t.AssignmentPattern) {\n  this.print(node.left, node);\n  if (node.left.type === \"Identifier\") {\n    if (node.left.optional) this.token(\"?\");\n    this.print(node.left.typeAnnotation, node);\n  }\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n}\n\nexport function AssignmentExpression(\n  this: Printer,\n  node: t.AssignmentExpression,\n) {\n  this.print(node.left, node);\n\n  this.space();\n  if (node.operator === \"in\" || node.operator === \"instanceof\") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n  }\n  this.space();\n\n  this.print(node.right, node);\n}\n\nexport function BindExpression(this: Printer, node: t.BindExpression) {\n  this.print(node.object, node);\n  this.token(\"::\");\n  this.print(node.callee, node);\n}\n\nexport {\n  AssignmentExpression as BinaryExpression,\n  AssignmentExpression as LogicalExpression,\n};\n\nexport function MemberExpression(this: Printer, node: t.MemberExpression) {\n  this.print(node.object, node);\n\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  let computed = node.computed;\n  // @ts-expect-error todo(flow->ts) maybe use specific literal types\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n\n  if (computed) {\n    const exit = this.enterForStatementInit(false);\n    this.token(\"[\");\n    this.print(node.property, node);\n    this.token(\"]\");\n    exit();\n  } else {\n    this.token(\".\");\n    this.print(node.property, node);\n  }\n}\n\nexport function MetaProperty(this: Printer, node: t.MetaProperty) {\n  this.print(node.meta, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}\n\nexport function PrivateName(this: Printer, node: t.PrivateName) {\n  this.token(\"#\");\n  this.print(node.id, node);\n}\n\nexport function V8IntrinsicIdentifier(\n  this: Printer,\n  node: t.V8IntrinsicIdentifier,\n) {\n  this.token(\"%\");\n  this.word(node.name);\n}\n\nexport function ModuleExpression(this: Printer, node: t.ModuleExpression) {\n  this.word(\"module\", true);\n  this.space();\n  this.token(\"{\");\n  this.indent();\n  const { body } = node;\n  if (body.body.length || body.directives.length) {\n    this.newline();\n  }\n  this.print(body, node);\n  this.dedent();\n  this.rightBrace(node);\n}\n","import type Printer from \"../printer.ts\";\nimport {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\nimport { TokenContext } from \"../node/index.ts\";\n\nexport function WithStatement(this: Printer, node: t.WithStatement) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport function IfStatement(this: Printer, node: t.IfStatement) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n\n  const needsBlock =\n    node.alternate && isIfStatement(getLastStatement(node.consequent));\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(charCodes.rightCurlyBrace)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\n// Recursively get the last statement.\nfunction getLastStatement(statement: t.Statement): t.Statement {\n  // @ts-expect-error: If statement.body is empty or not a Node, isStatement will return false\n  const { body } = statement;\n  if (isStatement(body) === false) {\n    return statement;\n  }\n\n  return getLastStatement(body);\n}\n\nexport function ForStatement(this: Printer, node: t.ForStatement) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n\n  {\n    const exit = this.enterForStatementInit(true);\n    this.tokenContext |= TokenContext.forHead;\n    this.print(node.init, node);\n    exit();\n  }\n\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport function WhileStatement(this: Printer, node: t.WhileStatement) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction ForXStatement(this: Printer, node: t.ForXStatement) {\n  this.word(\"for\");\n  this.space();\n  const isForOf = node.type === \"ForOfStatement\";\n  if (isForOf && node.await) {\n    this.word(\"await\");\n    this.space();\n  }\n  this.noIndentInnerCommentsHere();\n  this.token(\"(\");\n  {\n    const exit = isForOf ? null : this.enterForStatementInit(true);\n    this.tokenContext |= isForOf\n      ? TokenContext.forOfHead\n      : TokenContext.forInHead;\n    this.print(node.left, node);\n    exit?.();\n  }\n  this.space();\n  this.word(isForOf ? \"of\" : \"in\");\n  this.space();\n  this.print(node.right, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport const ForInStatement = ForXStatement;\nexport const ForOfStatement = ForXStatement;\n\nexport function DoWhileStatement(this: Printer, node: t.DoWhileStatement) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction printStatementAfterKeyword(\n  printer: Printer,\n  node: t.Node,\n  parent: t.Node,\n  isLabel: boolean,\n) {\n  if (node) {\n    printer.space();\n    printer.printTerminatorless(node, parent, isLabel);\n  }\n\n  printer.semicolon();\n}\n\nexport function BreakStatement(this: Printer, node: t.ContinueStatement) {\n  this.word(\"break\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nexport function ContinueStatement(this: Printer, node: t.ContinueStatement) {\n  this.word(\"continue\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nexport function ReturnStatement(this: Printer, node: t.ReturnStatement) {\n  this.word(\"return\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nexport function ThrowStatement(this: Printer, node: t.ThrowStatement) {\n  this.word(\"throw\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nexport function LabeledStatement(this: Printer, node: t.LabeledStatement) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function TryStatement(this: Printer, node: t.TryStatement) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  // Esprima bug puts the catch clause in a `handlers` array.\n  // see https://code.google.com/p/esprima/issues/detail?id=433\n  // We run into this from regenerator generated ast.\n  // @ts-expect-error todo(flow->ts) should ast node type be updated to support this?\n  if (node.handlers) {\n    // @ts-expect-error todo(flow->ts) should ast node type be updated to support this?\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nexport function CatchClause(this: Printer, node: t.CatchClause) {\n  this.word(\"catch\");\n  this.space();\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n  this.print(node.body, node);\n}\n\nexport function SwitchStatement(this: Printer, node: t.SwitchStatement) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n\n  this.printSequence(node.cases, node, {\n    indent: true,\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    },\n  });\n\n  this.rightBrace(node);\n}\n\nexport function SwitchCase(this: Printer, node: t.SwitchCase) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, { indent: true });\n  }\n}\n\nexport function DebuggerStatement(this: Printer) {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nexport function VariableDeclaration(\n  this: Printer,\n  node: t.VariableDeclaration,\n  parent: t.Node,\n) {\n  if (node.declare) {\n    // TS\n    this.word(\"declare\");\n    this.space();\n  }\n\n  const { kind } = node;\n  if (kind === \"await using\") {\n    this.word(\"await\");\n    this.space();\n    this.word(\"using\", true);\n  } else {\n    this.word(kind, kind === \"using\");\n  }\n  this.space();\n\n  let hasInits = false;\n  // don't add whitespace to loop heads\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        // has an init so let's split it up over multiple lines\n        hasInits = true;\n      }\n    }\n  }\n\n  //\n  // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on\n  // this will format declarations like:\n  //\n  //   let foo = \"bar\", bar = \"foo\";\n  //\n  // into\n  //\n  //   let foo = \"bar\",\n  //       bar = \"foo\";\n  //\n\n  this.printList(node.declarations, node, {\n    separator: hasInits\n      ? function (this: Printer) {\n          this.token(\",\");\n          this.newline();\n        }\n      : undefined,\n    indent: node.declarations.length > 1 ? true : false,\n  });\n\n  if (isFor(parent)) {\n    // don't give semicolons to these nodes since they'll be inserted in the parent generator\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nexport function VariableDeclarator(this: Printer, node: t.VariableDeclarator) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\"); // TS\n  // @ts-expect-error todo(flow-ts) Property 'typeAnnotation' does not exist on type 'MemberExpression'.\n  this.print(node.id.typeAnnotation, node);\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}\n","import type Printer from \"../printer.ts\";\nimport {\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\nexport function ClassDeclaration(\n  this: Printer,\n  node: t.ClassDeclaration,\n  parent: t.Node,\n) {\n  const inExport =\n    isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent);\n\n  if (\n    !inExport ||\n    !this._shouldPrintDecoratorsBeforeExport(\n      parent as t.ExportDeclaration & { declaration: t.ClassDeclaration },\n    )\n  ) {\n    this.printJoin(node.decorators, node);\n  }\n\n  if (node.declare) {\n    // TS\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    // TS\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  this.word(\"class\");\n\n  if (node.id) {\n    this.space();\n    this.print(node.id, node);\n  }\n\n  this.print(node.typeParameters, node);\n\n  if (node.superClass) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.superClass, node);\n    this.print(node.superTypeParameters, node);\n  }\n\n  if (node.implements) {\n    this.space();\n    this.word(\"implements\");\n    this.space();\n    this.printList(node.implements, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\nexport { ClassDeclaration as ClassExpression };\n\nexport function ClassBody(this: Printer, node: t.ClassBody) {\n  this.token(\"{\");\n  if (node.body.length === 0) {\n    this.token(\"}\");\n  } else {\n    this.newline();\n\n    const exit = this.enterForStatementInit(false);\n    this.printSequence(node.body, node, { indent: true });\n    exit();\n\n    if (!this.endsWith(charCodes.lineFeed)) this.newline();\n\n    this.rightBrace(node);\n  }\n}\n\nexport function ClassProperty(this: Printer, node: t.ClassProperty) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to property key, avoid line break\n  // between member modifiers and the property key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  this.tsPrintClassMemberModifiers(node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    this._variance(node);\n    this.print(node.key, node);\n  }\n\n  // TS\n  if (node.optional) {\n    this.token(\"?\");\n  }\n  if (node.definite) {\n    this.token(\"!\");\n  }\n\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassAccessorProperty(\n  this: Printer,\n  node: t.ClassAccessorProperty,\n) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to property key, avoid line break\n  // between member modifiers and the property key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  // TS does not support class accessor property yet\n  this.tsPrintClassMemberModifiers(node);\n\n  this.word(\"accessor\", true);\n  this.space();\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    // Todo: Flow does not support class accessor property yet.\n    this._variance(node);\n    this.print(node.key, node);\n  }\n\n  // TS\n  if (node.optional) {\n    this.token(\"?\");\n  }\n  if (node.definite) {\n    this.token(\"!\");\n  }\n\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassPrivateProperty(\n  this: Printer,\n  node: t.ClassPrivateProperty,\n) {\n  this.printJoin(node.decorators, node);\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.print(node.key, node);\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassMethod(this: Printer, node: t.ClassMethod) {\n  this._classMethodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ClassPrivateMethod(this: Printer, node: t.ClassPrivateMethod) {\n  this._classMethodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function _classMethodHead(\n  this: Printer,\n  node: t.ClassMethod | t.ClassPrivateMethod | t.TSDeclareMethod,\n) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to method key, avoid line break\n  // between member modifiers/method heads and the method key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  this.tsPrintClassMemberModifiers(node);\n  this._methodHead(node);\n}\n\nexport function StaticBlock(this: Printer, node: t.StaticBlock) {\n  this.word(\"static\");\n  this.space();\n  this.token(\"{\");\n  if (node.body.length === 0) {\n    this.token(\"}\");\n  } else {\n    this.newline();\n    this.printSequence(node.body, node, {\n      indent: true,\n    });\n    this.rightBrace(node);\n  }\n}\n","import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\nimport { isIdentifier, type ParentMaps } from \"@babel/types\";\nimport { TokenContext } from \"../node/index.ts\";\n\ntype ParentsOf<T extends t.Node> = ParentMaps[T[\"type\"]];\n\nexport function _params(\n  this: Printer,\n  node: t.Function | t.TSDeclareMethod | t.TSDeclareFunction,\n  idNode: t.Expression | t.PrivateName,\n  parentNode: ParentsOf<typeof node>,\n) {\n  this.print(node.typeParameters, node);\n\n  const nameInfo = _getFuncIdName.call(this, idNode, parentNode);\n  if (nameInfo) {\n    this.sourceIdentifierName(nameInfo.name, nameInfo.pos);\n  }\n\n  this.token(\"(\");\n  this._parameters(node.params, node);\n  this.token(\")\");\n\n  const noLineTerminator = node.type === \"ArrowFunctionExpression\";\n  this.print(node.returnType, node, noLineTerminator);\n\n  this._noLineTerminator = noLineTerminator;\n}\n\nexport function _parameters(\n  this: Printer,\n  parameters: t.Function[\"params\"],\n  parent:\n    | t.Function\n    | t.TSIndexSignature\n    | t.TSDeclareMethod\n    | t.TSDeclareFunction\n    | t.TSFunctionType\n    | t.TSConstructorType,\n) {\n  const exit = this.enterForStatementInit(false);\n\n  const paramLength = parameters.length;\n  for (let i = 0; i < paramLength; i++) {\n    this._param(parameters[i], parent);\n\n    if (i < parameters.length - 1) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n\n  exit();\n}\n\nexport function _param(\n  this: Printer,\n  parameter: t.Identifier | t.RestElement | t.Pattern | t.TSParameterProperty,\n  parent?:\n    | t.Function\n    | t.TSIndexSignature\n    | t.TSDeclareMethod\n    | t.TSDeclareFunction\n    | t.TSFunctionType\n    | t.TSConstructorType,\n) {\n  this.printJoin(parameter.decorators, parameter);\n  this.print(parameter, parent);\n  if (\n    // @ts-expect-error optional is not in TSParameterProperty\n    parameter.optional\n  ) {\n    this.token(\"?\"); // TS / flow\n  }\n\n  this.print(\n    // @ts-expect-error typeAnnotation is not in TSParameterProperty\n    parameter.typeAnnotation,\n    parameter,\n  ); // TS / flow\n}\n\nexport function _methodHead(this: Printer, node: t.Method | t.TSDeclareMethod) {\n  const kind = node.kind;\n  const key = node.key;\n\n  if (kind === \"get\" || kind === \"set\") {\n    this.word(kind);\n    this.space();\n  }\n\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n\n  if (\n    kind === \"method\" ||\n    // @ts-expect-error Fixme: kind: \"init\" is not defined\n    kind === \"init\"\n  ) {\n    if (node.generator) {\n      this.token(\"*\");\n    }\n  }\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(key, node);\n    this.token(\"]\");\n  } else {\n    this.print(key, node);\n  }\n\n  if (\n    // @ts-expect-error optional is not in ObjectMethod\n    node.optional\n  ) {\n    // TS\n    this.token(\"?\");\n  }\n\n  this._params(\n    node,\n    node.computed && node.key.type !== \"StringLiteral\" ? undefined : node.key,\n    undefined,\n  );\n}\n\nexport function _predicate(\n  this: Printer,\n  node:\n    | t.FunctionDeclaration\n    | t.FunctionExpression\n    | t.ArrowFunctionExpression,\n  noLineTerminatorAfter?: boolean,\n) {\n  if (node.predicate) {\n    if (!node.returnType) {\n      this.token(\":\");\n    }\n    this.space();\n    this.print(node.predicate, node, noLineTerminatorAfter);\n  }\n}\n\nexport function _functionHead(\n  this: Printer,\n  node: t.FunctionDeclaration | t.FunctionExpression | t.TSDeclareFunction,\n  parent: ParentsOf<typeof node>,\n) {\n  if (node.async) {\n    this.word(\"async\");\n    // We prevent inner comments from being printed here,\n    // so that they are always consistently printed in the\n    // same place regardless of the function type.\n    this._endsWithInnerRaw = false;\n    this.space();\n  }\n  this.word(\"function\");\n  if (node.generator) {\n    // We prevent inner comments from being printed here,\n    // so that they are always consistently printed in the\n    // same place regardless of the function type.\n    this._endsWithInnerRaw = false;\n    this.token(\"*\");\n  }\n\n  this.space();\n  if (node.id) {\n    this.print(node.id, node);\n  }\n\n  this._params(node, node.id, parent);\n  if (node.type !== \"TSDeclareFunction\") {\n    this._predicate(node);\n  }\n}\n\nexport function FunctionExpression(\n  this: Printer,\n  node: t.FunctionExpression,\n  parent: ParentsOf<typeof node>,\n) {\n  this._functionHead(node, parent);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport { FunctionExpression as FunctionDeclaration };\n\nexport function ArrowFunctionExpression(\n  this: Printer,\n  node: t.ArrowFunctionExpression,\n  parent: ParentsOf<typeof node>,\n) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n\n  // Try to avoid printing parens in simple cases, but only if we're pretty\n  // sure that they aren't needed by type annotations or potential newlines.\n  let firstParam;\n  if (\n    !this.format.retainLines &&\n    node.params.length === 1 &&\n    isIdentifier((firstParam = node.params[0])) &&\n    !hasTypesOrComments(node, firstParam)\n  ) {\n    this.print(firstParam, node, true);\n  } else {\n    this._params(node, undefined, parent);\n  }\n\n  this._predicate(node, true);\n  this.space();\n  // When printing (x)/*1*/=>{}, we remove the parentheses\n  // and thus there aren't two contiguous inner tokens.\n  // We forcefully print inner comments here.\n  this.printInnerComments();\n  this.token(\"=>\");\n\n  this.space();\n\n  this.tokenContext |= TokenContext.arrowBody;\n  this.print(node.body, node);\n}\n\nfunction hasTypesOrComments(\n  node: t.ArrowFunctionExpression,\n  param: t.Identifier,\n): boolean {\n  return !!(\n    node.typeParameters ||\n    node.returnType ||\n    node.predicate ||\n    param.typeAnnotation ||\n    param.optional ||\n    // Flow does not support `foo /*: string*/ => {};`\n    param.leadingComments?.length ||\n    param.trailingComments?.length\n  );\n}\n\nfunction _getFuncIdName(\n  this: Printer,\n  idNode: t.Expression | t.PrivateName,\n  parent: ParentsOf<t.Function | t.TSDeclareMethod | t.TSDeclareFunction>,\n) {\n  let id: t.Expression | t.PrivateName | t.LVal = idNode;\n\n  if (!id && parent) {\n    const parentType = parent.type;\n\n    if (parentType === \"VariableDeclarator\") {\n      id = parent.id;\n    } else if (\n      parentType === \"AssignmentExpression\" ||\n      parentType === \"AssignmentPattern\"\n    ) {\n      id = parent.left;\n    } else if (\n      parentType === \"ObjectProperty\" ||\n      parentType === \"ClassProperty\"\n    ) {\n      if (!parent.computed || parent.key.type === \"StringLiteral\") {\n        id = parent.key;\n      }\n    } else if (\n      parentType === \"ClassPrivateProperty\" ||\n      parentType === \"ClassAccessorProperty\"\n    ) {\n      id = parent.key;\n    }\n  }\n\n  if (!id) return;\n\n  let nameInfo;\n\n  if (id.type === \"Identifier\") {\n    nameInfo = {\n      pos: id.loc?.start,\n      name: id.loc?.identifierName || id.name,\n    };\n  } else if (id.type === \"PrivateName\") {\n    nameInfo = {\n      pos: id.loc?.start,\n      name: \"#\" + id.id.name,\n    };\n  } else if (id.type === \"StringLiteral\") {\n    nameInfo = {\n      pos: id.loc?.start,\n      name: id.value,\n    };\n  }\n\n  return nameInfo;\n}\n","import type Printer from \"../printer.ts\";\nimport {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { TokenContext } from \"../node/index.ts\";\n\nexport function ImportSpecifier(this: Printer, node: t.ImportSpecifier) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n  // @ts-expect-error todo(flow-ts) maybe check node type instead of relying on name to be undefined on t.StringLiteral\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nexport function ImportDefaultSpecifier(\n  this: Printer,\n  node: t.ImportDefaultSpecifier,\n) {\n  this.print(node.local, node);\n}\n\nexport function ExportDefaultSpecifier(\n  this: Printer,\n  node: t.ExportDefaultSpecifier,\n) {\n  this.print(node.exported, node);\n}\n\nexport function ExportSpecifier(this: Printer, node: t.ExportSpecifier) {\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.print(node.local, node);\n  // @ts-expect-error todo(flow-ts) maybe check node type instead of relying on name to be undefined on t.StringLiteral\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nexport function ExportNamespaceSpecifier(\n  this: Printer,\n  node: t.ExportNamespaceSpecifier,\n) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nlet warningShown = false;\n\nexport function _printAttributes(\n  this: Printer,\n  node: Extract<t.Node, { attributes?: t.ImportAttribute[] }>,\n) {\n  const { importAttributesKeyword } = this.format;\n  const { attributes, assertions } = node;\n\n  if (\n    attributes &&\n    !importAttributesKeyword &&\n    // In the production build only show the warning once.\n    // We want to show it per-usage locally for tests.\n    (!process.env.IS_PUBLISH || !warningShown)\n  ) {\n    warningShown = true;\n    console.warn(`\\\nYou are using import attributes, without specifying the desired output syntax.\nPlease specify the \"importAttributesKeyword\" generator option, whose value can be one of:\n - \"with\"        : \\`import { a } from \"b\" with { type: \"json\" };\\`\n - \"assert\"      : \\`import { a } from \"b\" assert { type: \"json\" };\\`\n - \"with-legacy\" : \\`import { a } from \"b\" with type: \"json\";\\`\n`);\n  }\n\n  const useAssertKeyword =\n    importAttributesKeyword === \"assert\" ||\n    (!importAttributesKeyword && assertions);\n\n  this.word(useAssertKeyword ? \"assert\" : \"with\");\n  this.space();\n\n  if (!useAssertKeyword && importAttributesKeyword !== \"with\") {\n    // with-legacy\n    this.printList(attributes || assertions, node);\n    return;\n  }\n\n  this.token(\"{\");\n  this.space();\n  this.printList(attributes || assertions, node);\n  this.space();\n  this.token(\"}\");\n}\n\nexport function ExportAllDeclaration(\n  this: Printer,\n  node: t.ExportAllDeclaration | t.DeclareExportAllDeclaration,\n) {\n  this.word(\"export\");\n  this.space();\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  // @ts-expect-error Fixme: attributes is not defined in DeclareExportAllDeclaration\n  if (node.attributes?.length || node.assertions?.length) {\n    this.print(node.source, node, true);\n    this.space();\n    // @ts-expect-error Fixme: attributes is not defined in DeclareExportAllDeclaration\n    this._printAttributes(node);\n  } else {\n    this.print(node.source, node);\n  }\n\n  this.semicolon();\n}\n\nfunction maybePrintDecoratorsBeforeExport(\n  printer: Printer,\n  node: t.ExportNamedDeclaration | t.ExportDefaultDeclaration,\n) {\n  if (\n    isClassDeclaration(node.declaration) &&\n    printer._shouldPrintDecoratorsBeforeExport(\n      node as t.ExportNamedDeclaration & { declaration: t.ClassDeclaration },\n    )\n  ) {\n    printer.printJoin(node.declaration.decorators, node);\n  }\n}\n\nexport function ExportNamedDeclaration(\n  this: Printer,\n  node: t.ExportNamedDeclaration,\n) {\n  maybePrintDecoratorsBeforeExport(this, node);\n\n  this.word(\"export\");\n  this.space();\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n\n    // print \"special\" specifiers first\n    let hasSpecial = false;\n    for (;;) {\n      const first = specifiers[0];\n      if (\n        isExportDefaultSpecifier(first) ||\n        isExportNamespaceSpecifier(first)\n      ) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || (!specifiers.length && !hasSpecial)) {\n      this.token(\"{\");\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      if (node.attributes?.length || node.assertions?.length) {\n        this.print(node.source, node, true);\n        this.space();\n        this._printAttributes(node);\n      } else {\n        this.print(node.source, node);\n      }\n    }\n\n    this.semicolon();\n  }\n}\n\nexport function ExportDefaultDeclaration(\n  this: Printer,\n  node: t.ExportDefaultDeclaration,\n) {\n  maybePrintDecoratorsBeforeExport(this, node);\n\n  this.word(\"export\");\n  this.noIndentInnerCommentsHere();\n  this.space();\n  this.word(\"default\");\n  this.space();\n  this.tokenContext |= TokenContext.exportDefault;\n  const declar = node.declaration;\n  this.print(declar, node);\n  if (!isStatement(declar)) this.semicolon();\n}\n\nexport function ImportDeclaration(this: Printer, node: t.ImportDeclaration) {\n  this.word(\"import\");\n  this.space();\n\n  const isTypeKind = node.importKind === \"type\" || node.importKind === \"typeof\";\n  if (isTypeKind) {\n    this.noIndentInnerCommentsHere();\n    this.word(node.importKind);\n    this.space();\n  } else if (node.module) {\n    this.noIndentInnerCommentsHere();\n    this.word(\"module\");\n    this.space();\n  } else if (node.phase) {\n    this.noIndentInnerCommentsHere();\n    this.word(node.phase);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n  const hasSpecifiers = !!specifiers.length;\n  // print \"special\" specifiers first. The loop condition is constant,\n  // but there is a \"break\" in the body.\n  while (hasSpecifiers) {\n    const first = specifiers[0];\n    if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n      this.print(specifiers.shift(), node);\n      if (specifiers.length) {\n        this.token(\",\");\n        this.space();\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (specifiers.length) {\n    this.token(\"{\");\n    this.space();\n    this.printList(specifiers, node);\n    this.space();\n    this.token(\"}\");\n  } else if (isTypeKind && !hasSpecifiers) {\n    this.token(\"{\");\n    this.token(\"}\");\n  }\n\n  if (hasSpecifiers || isTypeKind) {\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  if (node.attributes?.length || node.assertions?.length) {\n    this.print(node.source, node, true);\n    this.space();\n    this._printAttributes(node);\n  } else {\n    this.print(node.source, node);\n  }\n\n  this.semicolon();\n}\n\nexport function ImportAttribute(this: Printer, node: t.ImportAttribute) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nexport function ImportNamespaceSpecifier(\n  this: Printer,\n  node: t.ImportNamespaceSpecifier,\n) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}\n\nexport function ImportExpression(this: Printer, node: t.ImportExpression) {\n  this.word(\"import\");\n  if (node.phase) {\n    this.token(\".\");\n    this.word(node.phase);\n  }\n  this.token(\"(\");\n  this.print(node.source, node);\n  if (node.options != null) {\n    this.token(\",\");\n    this.space();\n    this.print(node.options, node);\n  }\n  this.token(\")\");\n}\n","import type Printer from \"../printer.ts\";\nimport { isAssignmentPattern, isIdentifier } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport jsesc from \"jsesc\";\n\nexport function Identifier(this: Printer, node: t.Identifier) {\n  this.sourceIdentifierName(node.loc?.identifierName || node.name);\n  this.word(node.name);\n}\n\nexport function ArgumentPlaceholder(this: Printer) {\n  this.token(\"?\");\n}\n\nexport function RestElement(this: Printer, node: t.RestElement) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nexport { RestElement as SpreadElement };\n\nexport function ObjectExpression(this: Printer, node: t.ObjectExpression) {\n  const props = node.properties;\n\n  this.token(\"{\");\n\n  if (props.length) {\n    const exit = this.enterForStatementInit(false);\n    this.space();\n    this.printList(props, node, { indent: true, statement: true });\n    this.space();\n    exit();\n  }\n\n  this.sourceWithOffset(\"end\", node.loc, -1);\n\n  this.token(\"}\");\n}\n\nexport { ObjectExpression as ObjectPattern };\n\nexport function ObjectMethod(this: Printer, node: t.ObjectMethod) {\n  this.printJoin(node.decorators, node);\n  this._methodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ObjectProperty(this: Printer, node: t.ObjectProperty) {\n  this.printJoin(node.decorators, node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});`\n    if (\n      isAssignmentPattern(node.value) &&\n      isIdentifier(node.key) &&\n      // @ts-expect-error todo(flow->ts) `.name` does not exist on some types in union\n      node.key.name === node.value.left.name\n    ) {\n      this.print(node.value, node);\n      return;\n    }\n\n    this.print(node.key, node);\n\n    // shorthand!\n    if (\n      node.shorthand &&\n      isIdentifier(node.key) &&\n      isIdentifier(node.value) &&\n      node.key.name === node.value.name\n    ) {\n      return;\n    }\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nexport function ArrayExpression(this: Printer, node: t.ArrayExpression) {\n  const elems = node.elements;\n  const len = elems.length;\n\n  this.token(\"[\");\n\n  const exit = this.enterForStatementInit(false);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    } else {\n      // If the array expression ends with a hole, that hole\n      // will be ignored by the interpreter, but if it ends with\n      // two (or more) holes, we need to write out two (or more)\n      // commas so that the resulting code is interpreted with\n      // both (all) of the holes.\n      this.token(\",\");\n    }\n  }\n\n  exit();\n\n  this.token(\"]\");\n}\n\nexport { ArrayExpression as ArrayPattern };\n\nexport function RecordExpression(this: Printer, node: t.RecordExpression) {\n  const props = node.properties;\n\n  let startToken;\n  let endToken;\n  if (process.env.BABEL_8_BREAKING) {\n    startToken = \"#{\";\n    endToken = \"}\";\n  } else {\n    if (this.format.recordAndTupleSyntaxType === \"bar\") {\n      startToken = \"{|\";\n      endToken = \"|}\";\n    } else if (\n      this.format.recordAndTupleSyntaxType !== \"hash\" &&\n      this.format.recordAndTupleSyntaxType != null\n    ) {\n      throw new Error(\n        `The \"recordAndTupleSyntaxType\" generator option must be \"bar\" or \"hash\" (${JSON.stringify(\n          this.format.recordAndTupleSyntaxType,\n        )} received).`,\n      );\n    } else {\n      startToken = \"#{\";\n      endToken = \"}\";\n    }\n  }\n\n  this.token(startToken);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, { indent: true, statement: true });\n    this.space();\n  }\n  this.token(endToken);\n}\n\nexport function TupleExpression(this: Printer, node: t.TupleExpression) {\n  const elems = node.elements;\n  const len = elems.length;\n\n  let startToken;\n  let endToken;\n  if (process.env.BABEL_8_BREAKING) {\n    startToken = \"#[\";\n    endToken = \"]\";\n  } else {\n    if (this.format.recordAndTupleSyntaxType === \"bar\") {\n      startToken = \"[|\";\n      endToken = \"|]\";\n    } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n      startToken = \"#[\";\n      endToken = \"]\";\n    } else {\n      throw new Error(\n        `${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`,\n      );\n    }\n  }\n\n  this.token(startToken);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    }\n  }\n\n  this.token(endToken);\n}\n\nexport function RegExpLiteral(this: Printer, node: t.RegExpLiteral) {\n  this.word(`/${node.pattern}/${node.flags}`);\n}\n\nexport function BooleanLiteral(this: Printer, node: t.BooleanLiteral) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nexport function NullLiteral(this: Printer) {\n  this.word(\"null\");\n}\n\nexport function NumericLiteral(this: Printer, node: t.NumericLiteral) {\n  const raw = this.getPossibleRaw(node);\n  const opts = this.format.jsescOption;\n  const value = node.value;\n  const str = value + \"\";\n  if (opts.numbers) {\n    this.number(jsesc(value, opts), value);\n  } else if (raw == null) {\n    this.number(str, value); // normalize\n  } else if (this.format.minified) {\n    this.number(raw.length < str.length ? raw : str, value);\n  } else {\n    this.number(raw, value);\n  }\n}\n\nexport function StringLiteral(this: Printer, node: t.StringLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n\n  const val = jsesc(node.value, this.format.jsescOption);\n\n  this.token(val);\n}\n\nexport function BigIntLiteral(this: Printer, node: t.BigIntLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.word(raw);\n    return;\n  }\n  this.word(node.value + \"n\");\n}\n\nexport function DecimalLiteral(this: Printer, node: t.DecimalLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.word(raw);\n    return;\n  }\n  this.word(node.value + \"m\");\n}\n\n// Hack pipe operator\nconst validTopicTokenSet = new Set([\"^^\", \"@@\", \"^\", \"%\", \"#\"]);\nexport function TopicReference(this: Printer) {\n  const { topicToken } = this.format;\n\n  if (validTopicTokenSet.has(topicToken)) {\n    this.token(topicToken);\n  } else {\n    const givenTopicTokenJSON = JSON.stringify(topicToken);\n    const validTopics = Array.from(validTopicTokenSet, v => JSON.stringify(v));\n    throw new Error(\n      `The \"topicToken\" generator option must be one of ` +\n        `${validTopics.join(\", \")} (${givenTopicTokenJSON} received instead).`,\n    );\n  }\n}\n\n// Smart-mix pipe operator\nexport function PipelineTopicExpression(\n  this: Printer,\n  node: t.PipelineTopicExpression,\n) {\n  this.print(node.expression, node);\n}\n\nexport function PipelineBareFunction(\n  this: Printer,\n  node: t.PipelineBareFunction,\n) {\n  this.print(node.callee, node);\n}\n\nexport function PipelinePrimaryTopicReference(this: Printer) {\n  this.token(\"#\");\n}\n","import type Printer from \"../printer.ts\";\nimport { isDeclareExportDeclaration, isStatement } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { ExportAllDeclaration } from \"./modules.ts\";\nimport { TokenContext } from \"../node/index.ts\";\n\nexport function AnyTypeAnnotation(this: Printer) {\n  this.word(\"any\");\n}\n\nexport function ArrayTypeAnnotation(\n  this: Printer,\n  node: t.ArrayTypeAnnotation,\n) {\n  this.print(node.elementType, node, true);\n  this.token(\"[\");\n  this.token(\"]\");\n}\n\nexport function BooleanTypeAnnotation(this: Printer) {\n  this.word(\"boolean\");\n}\n\nexport function BooleanLiteralTypeAnnotation(\n  this: Printer,\n  node: t.BooleanLiteralTypeAnnotation,\n) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nexport function NullLiteralTypeAnnotation(this: Printer) {\n  this.word(\"null\");\n}\n\nexport function DeclareClass(\n  this: Printer,\n  node: t.DeclareClass,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"class\");\n  this.space();\n  this._interfaceish(node);\n}\n\nexport function DeclareFunction(\n  this: Printer,\n  node: t.DeclareFunction,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"function\");\n  this.space();\n  this.print(node.id, node);\n  // @ts-ignore(Babel 7 vs Babel 8) TODO(Babel 8) Remove this comment, since we'll remove the Noop node\n  this.print(node.id.typeAnnotation.typeAnnotation, node);\n\n  if (node.predicate) {\n    this.space();\n    this.print(node.predicate, node);\n  }\n\n  this.semicolon();\n}\n\nexport function InferredPredicate(this: Printer) {\n  this.token(\"%\");\n  this.word(\"checks\");\n}\n\nexport function DeclaredPredicate(this: Printer, node: t.DeclaredPredicate) {\n  this.token(\"%\");\n  this.word(\"checks\");\n  this.token(\"(\");\n  this.print(node.value, node);\n  this.token(\")\");\n}\n\nexport function DeclareInterface(this: Printer, node: t.DeclareInterface) {\n  this.word(\"declare\");\n  this.space();\n  this.InterfaceDeclaration(node);\n}\n\nexport function DeclareModule(this: Printer, node: t.DeclareModule) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.space();\n  this.print(node.id, node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function DeclareModuleExports(\n  this: Printer,\n  node: t.DeclareModuleExports,\n) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.token(\".\");\n  this.word(\"exports\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function DeclareTypeAlias(this: Printer, node: t.DeclareTypeAlias) {\n  this.word(\"declare\");\n  this.space();\n  this.TypeAlias(node);\n}\n\nexport function DeclareOpaqueType(\n  this: Printer,\n  node: t.DeclareOpaqueType,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.OpaqueType(node);\n}\n\nexport function DeclareVariable(\n  this: Printer,\n  node: t.DeclareVariable,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"var\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  this.semicolon();\n}\n\nexport function DeclareExportDeclaration(\n  this: Printer,\n  node: t.DeclareExportDeclaration,\n) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"export\");\n  this.space();\n  if (node.default) {\n    this.word(\"default\");\n    this.space();\n  }\n\n  FlowExportDeclaration.call(this, node);\n}\n\nexport function DeclareExportAllDeclaration(\n  this: Printer,\n  node: t.DeclareExportAllDeclaration,\n) {\n  this.word(\"declare\");\n  this.space();\n  ExportAllDeclaration.call(this, node);\n}\n\nexport function EnumDeclaration(this: Printer, node: t.EnumDeclaration) {\n  const { id, body } = node;\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.print(body, node);\n}\n\nfunction enumExplicitType(\n  context: Printer,\n  name: string,\n  hasExplicitType: boolean,\n) {\n  if (hasExplicitType) {\n    context.space();\n    context.word(\"of\");\n    context.space();\n    context.word(name);\n  }\n  context.space();\n}\n\nfunction enumBody(context: Printer, node: t.EnumBody) {\n  const { members } = node;\n  context.token(\"{\");\n  context.indent();\n  context.newline();\n  for (const member of members) {\n    context.print(member, node);\n    context.newline();\n  }\n  if (node.hasUnknownMembers) {\n    context.token(\"...\");\n    context.newline();\n  }\n  context.dedent();\n  context.token(\"}\");\n}\n\nexport function EnumBooleanBody(this: Printer, node: t.EnumBooleanBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"boolean\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumNumberBody(this: Printer, node: t.EnumNumberBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"number\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumStringBody(this: Printer, node: t.EnumStringBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"string\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumSymbolBody(this: Printer, node: t.EnumSymbolBody) {\n  enumExplicitType(this, \"symbol\", true);\n  enumBody(this, node);\n}\n\nexport function EnumDefaultedMember(\n  this: Printer,\n  node: t.EnumDefaultedMember,\n) {\n  const { id } = node;\n  this.print(id, node);\n  this.token(\",\");\n}\n\nfunction enumInitializedMember(\n  context: Printer,\n  node: t.EnumBooleanMember | t.EnumNumberMember | t.EnumStringMember,\n) {\n  const { id, init } = node;\n  context.print(id, node);\n  context.space();\n  context.token(\"=\");\n  context.space();\n  context.print(init, node);\n  context.token(\",\");\n}\n\nexport function EnumBooleanMember(this: Printer, node: t.EnumBooleanMember) {\n  enumInitializedMember(this, node);\n}\n\nexport function EnumNumberMember(this: Printer, node: t.EnumNumberMember) {\n  enumInitializedMember(this, node);\n}\n\nexport function EnumStringMember(this: Printer, node: t.EnumStringMember) {\n  enumInitializedMember(this, node);\n}\n\nfunction FlowExportDeclaration(\n  this: Printer,\n  node: t.DeclareExportDeclaration,\n) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    this.token(\"{\");\n    if (node.specifiers.length) {\n      this.space();\n      this.printList(node.specifiers, node);\n      this.space();\n    }\n    this.token(\"}\");\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n    }\n\n    this.semicolon();\n  }\n}\n\nexport function ExistsTypeAnnotation(this: Printer) {\n  this.token(\"*\");\n}\n\nexport function FunctionTypeAnnotation(\n  this: Printer,\n  node: t.FunctionTypeAnnotation,\n  parent?: t.Node,\n) {\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n\n  if (node.this) {\n    this.word(\"this\");\n    this.token(\":\");\n    this.space();\n    this.print(node.this.typeAnnotation, node);\n    if (node.params.length || node.rest) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n\n  this.printList(node.params, node);\n\n  if (node.rest) {\n    if (node.params.length) {\n      this.token(\",\");\n      this.space();\n    }\n    this.token(\"...\");\n    this.print(node.rest, node);\n  }\n\n  this.token(\")\");\n\n  // this node type is overloaded, not sure why but it makes it EXTREMELY annoying\n\n  const type = parent?.type;\n  if (\n    type != null &&\n    (type === \"ObjectTypeCallProperty\" ||\n      type === \"ObjectTypeInternalSlot\" ||\n      type === \"DeclareFunction\" ||\n      (type === \"ObjectTypeProperty\" && parent.method))\n  ) {\n    this.token(\":\");\n  } else {\n    this.space();\n    this.token(\"=>\");\n  }\n\n  this.space();\n  this.print(node.returnType, node);\n}\n\nexport function FunctionTypeParam(this: Printer, node: t.FunctionTypeParam) {\n  this.print(node.name, node);\n  if (node.optional) this.token(\"?\");\n  if (node.name) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.typeAnnotation, node);\n}\n\nexport function InterfaceExtends(this: Printer, node: t.InterfaceExtends) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node, true);\n}\n\nexport {\n  InterfaceExtends as ClassImplements,\n  InterfaceExtends as GenericTypeAnnotation,\n};\n\nexport function _interfaceish(\n  this: Printer,\n  node: t.InterfaceDeclaration | t.DeclareInterface | t.DeclareClass,\n) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  if (node.extends?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n  if (node.type === \"DeclareClass\") {\n    if (node.mixins?.length) {\n      this.space();\n      this.word(\"mixins\");\n      this.space();\n      this.printList(node.mixins, node);\n    }\n    if (node.implements?.length) {\n      this.space();\n      this.word(\"implements\");\n      this.space();\n      this.printList(node.implements, node);\n    }\n  }\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function _variance(\n  this: Printer,\n  node:\n    | t.TypeParameter\n    | t.ObjectTypeIndexer\n    | t.ObjectTypeProperty\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty,\n) {\n  const kind = node.variance?.kind;\n  if (kind != null) {\n    if (kind === \"plus\") {\n      this.token(\"+\");\n    } else if (kind === \"minus\") {\n      this.token(\"-\");\n    }\n  }\n}\n\nexport function InterfaceDeclaration(\n  this: Printer,\n  node: t.InterfaceDeclaration | t.DeclareInterface,\n) {\n  this.word(\"interface\");\n  this.space();\n  this._interfaceish(node);\n}\n\nfunction andSeparator(this: Printer) {\n  this.space();\n  this.token(\"&\");\n  this.space();\n}\n\nexport function InterfaceTypeAnnotation(\n  this: Printer,\n  node: t.InterfaceTypeAnnotation,\n) {\n  this.word(\"interface\");\n  if (node.extends?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function IntersectionTypeAnnotation(\n  this: Printer,\n  node: t.IntersectionTypeAnnotation,\n) {\n  this.printJoin(node.types, node, { separator: andSeparator });\n}\n\nexport function MixedTypeAnnotation(this: Printer) {\n  this.word(\"mixed\");\n}\n\nexport function EmptyTypeAnnotation(this: Printer) {\n  this.word(\"empty\");\n}\n\nexport function NullableTypeAnnotation(\n  this: Printer,\n  node: t.NullableTypeAnnotation,\n) {\n  this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport {\n  NumericLiteral as NumberLiteralTypeAnnotation,\n  StringLiteral as StringLiteralTypeAnnotation,\n} from \"./types.ts\";\n\nexport function NumberTypeAnnotation(this: Printer) {\n  this.word(\"number\");\n}\n\nexport function StringTypeAnnotation(this: Printer) {\n  this.word(\"string\");\n}\n\nexport function ThisTypeAnnotation(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function TupleTypeAnnotation(\n  this: Printer,\n  node: t.TupleTypeAnnotation,\n) {\n  this.token(\"[\");\n  this.printList(node.types, node);\n  this.token(\"]\");\n}\n\nexport function TypeofTypeAnnotation(\n  this: Printer,\n  node: t.TypeofTypeAnnotation,\n) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.argument, node);\n}\n\nexport function TypeAlias(\n  this: Printer,\n  node: t.TypeAlias | t.DeclareTypeAlias,\n) {\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n  this.semicolon();\n}\n\nexport function TypeAnnotation(\n  this: Printer,\n  node: t.TypeAnnotation,\n  parent: t.Node,\n) {\n  this.token(\":\");\n  this.space();\n  if (parent.type === \"ArrowFunctionExpression\") {\n    this.tokenContext |= TokenContext.arrowFlowReturnType;\n  } else if (\n    // @ts-expect-error todo(flow->ts) can this be removed? `.optional` looks to be not existing property\n    node.optional\n  ) {\n    this.token(\"?\");\n  }\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TypeParameterInstantiation(\n  this: Printer,\n  node: t.TypeParameterInstantiation,\n): void {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nexport { TypeParameterInstantiation as TypeParameterDeclaration };\n\nexport function TypeParameter(this: Printer, node: t.TypeParameter) {\n  this._variance(node);\n\n  this.word(node.name);\n\n  if (node.bound) {\n    this.print(node.bound, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nexport function OpaqueType(\n  this: Printer,\n  node: t.OpaqueType | t.DeclareOpaqueType,\n) {\n  this.word(\"opaque\");\n  this.space();\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  if (node.supertype) {\n    this.token(\":\");\n    this.space();\n    this.print(node.supertype, node);\n  }\n\n  if (node.impltype) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.impltype, node);\n  }\n  this.semicolon();\n}\n\nexport function ObjectTypeAnnotation(\n  this: Printer,\n  node: t.ObjectTypeAnnotation,\n) {\n  if (node.exact) {\n    this.token(\"{|\");\n  } else {\n    this.token(\"{\");\n  }\n\n  // TODO: remove the array fallbacks and instead enforce the types to require an array\n  const props = [\n    ...node.properties,\n    ...(node.callProperties || []),\n    ...(node.indexers || []),\n    ...(node.internalSlots || []),\n  ];\n\n  if (props.length) {\n    this.newline();\n\n    this.space();\n\n    this.printJoin(props, node, {\n      addNewlines(leading) {\n        if (leading && !props[0]) return 1;\n      },\n      indent: true,\n      statement: true,\n      iterator: () => {\n        if (props.length !== 1 || node.inexact) {\n          this.token(\",\");\n          this.space();\n        }\n      },\n    });\n\n    this.space();\n  }\n\n  if (node.inexact) {\n    this.indent();\n    this.token(\"...\");\n    if (props.length) {\n      this.newline();\n    }\n    this.dedent();\n  }\n\n  if (node.exact) {\n    this.token(\"|}\");\n  } else {\n    this.token(\"}\");\n  }\n}\n\nexport function ObjectTypeInternalSlot(\n  this: Printer,\n  node: t.ObjectTypeInternalSlot,\n) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.token(\"[\");\n  this.token(\"[\");\n  this.print(node.id, node);\n  this.token(\"]\");\n  this.token(\"]\");\n  if (node.optional) this.token(\"?\");\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeCallProperty(\n  this: Printer,\n  node: t.ObjectTypeCallProperty,\n) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeIndexer(this: Printer, node: t.ObjectTypeIndexer) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this._variance(node);\n  this.token(\"[\");\n  if (node.id) {\n    this.print(node.id, node);\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.key, node);\n  this.token(\"]\");\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeProperty(this: Printer, node: t.ObjectTypeProperty) {\n  if (node.proto) {\n    this.word(\"proto\");\n    this.space();\n  }\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (node.kind === \"get\" || node.kind === \"set\") {\n    this.word(node.kind);\n    this.space();\n  }\n  this._variance(node);\n  this.print(node.key, node);\n  if (node.optional) this.token(\"?\");\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeSpreadProperty(\n  this: Printer,\n  node: t.ObjectTypeSpreadProperty,\n) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nexport function QualifiedTypeIdentifier(\n  this: Printer,\n  node: t.QualifiedTypeIdentifier,\n) {\n  this.print(node.qualification, node);\n  this.token(\".\");\n  this.print(node.id, node);\n}\n\nexport function SymbolTypeAnnotation(this: Printer) {\n  this.word(\"symbol\");\n}\n\nfunction orSeparator(this: Printer) {\n  this.space();\n  this.token(\"|\");\n  this.space();\n}\n\nexport function UnionTypeAnnotation(\n  this: Printer,\n  node: t.UnionTypeAnnotation,\n) {\n  this.printJoin(node.types, node, { separator: orSeparator });\n}\n\nexport function TypeCastExpression(this: Printer, node: t.TypeCastExpression) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nexport function Variance(this: Printer, node: t.Variance) {\n  if (node.kind === \"plus\") {\n    this.token(\"+\");\n  } else {\n    this.token(\"-\");\n  }\n}\n\nexport function VoidTypeAnnotation(this: Printer) {\n  this.word(\"void\");\n}\n\nexport function IndexedAccessType(this: Printer, node: t.IndexedAccessType) {\n  this.print(node.objectType, node, true);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nexport function OptionalIndexedAccessType(\n  this: Printer,\n  node: t.OptionalIndexedAccessType,\n) {\n  this.print(node.objectType, node);\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n","import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function File(this: Printer, node: t.File) {\n  if (node.program) {\n    // Print this here to ensure that Program node 'leadingComments' still\n    // get printed after the hashbang.\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nexport function Program(this: Printer, node: t.Program) {\n  // An empty Program doesn't have any inner tokens, so\n  // we must explicitly print its inner comments.\n  this.noIndentInnerCommentsHere();\n  this.printInnerComments();\n\n  const directivesLen = node.directives?.length;\n  if (directivesLen) {\n    const newline = node.body.length ? 2 : 1;\n    this.printSequence(node.directives, node, {\n      trailingCommentsLineOffset: newline,\n    });\n    if (!node.directives[directivesLen - 1].trailingComments?.length) {\n      this.newline(newline);\n    }\n  }\n\n  this.printSequence(node.body, node);\n}\n\nexport function BlockStatement(this: Printer, node: t.BlockStatement) {\n  this.token(\"{\");\n\n  const directivesLen = node.directives?.length;\n  if (directivesLen) {\n    const newline = node.body.length ? 2 : 1;\n    this.printSequence(node.directives, node, {\n      indent: true,\n      trailingCommentsLineOffset: newline,\n    });\n    if (!node.directives[directivesLen - 1].trailingComments?.length) {\n      this.newline(newline);\n    }\n  }\n\n  const exit = this.enterForStatementInit(false);\n  this.printSequence(node.body, node, { indent: true });\n  exit();\n\n  this.rightBrace(node);\n}\n\nexport function Directive(this: Printer, node: t.Directive) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\n// These regexes match an even number of \\ followed by a quote\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nexport function DirectiveLiteral(this: Printer, node: t.DirectiveLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n\n  const { value } = node;\n\n  // NOTE: In directives we can't change escapings,\n  // because they change the behavior.\n  // e.g. \"us\\x65 strict\" (\\x65 is e) is not a \"use strict\" directive.\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\n      \"Malformed AST: it is not possible to print a directive containing\" +\n        \" both unescaped single and double quotes.\",\n    );\n  }\n}\n\nexport function InterpreterDirective(\n  this: Printer,\n  node: t.InterpreterDirective,\n) {\n  this.token(`#!${node.value}`);\n  this.newline(1, true);\n}\n\nexport function Placeholder(this: Printer, node: t.Placeholder) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}\n","import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function JSXAttribute(this: Printer, node: t.JSXAttribute) {\n  this.print(node.name, node);\n  if (node.value) {\n    this.token(\"=\");\n    this.print(node.value, node);\n  }\n}\n\nexport function JSXIdentifier(this: Printer, node: t.JSXIdentifier) {\n  this.word(node.name);\n}\n\nexport function JSXNamespacedName(this: Printer, node: t.JSXNamespacedName) {\n  this.print(node.namespace, node);\n  this.token(\":\");\n  this.print(node.name, node);\n}\n\nexport function JSXMemberExpression(\n  this: Printer,\n  node: t.JSXMemberExpression,\n) {\n  this.print(node.object, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}\n\nexport function JSXSpreadAttribute(this: Printer, node: t.JSXSpreadAttribute) {\n  this.token(\"{\");\n  this.token(\"...\");\n  this.print(node.argument, node);\n  this.token(\"}\");\n}\n\nexport function JSXExpressionContainer(\n  this: Printer,\n  node: t.JSXExpressionContainer,\n) {\n  this.token(\"{\");\n  this.print(node.expression, node);\n  this.token(\"}\");\n}\n\nexport function JSXSpreadChild(this: Printer, node: t.JSXSpreadChild) {\n  this.token(\"{\");\n  this.token(\"...\");\n  this.print(node.expression, node);\n  this.token(\"}\");\n}\n\nexport function JSXText(this: Printer, node: t.JSXText) {\n  const raw = this.getPossibleRaw(node);\n\n  if (raw !== undefined) {\n    this.token(raw, true);\n  } else {\n    this.token(node.value, true);\n  }\n}\n\nexport function JSXElement(this: Printer, node: t.JSXElement) {\n  const open = node.openingElement;\n  this.print(open, node);\n  if (open.selfClosing) return;\n\n  this.indent();\n  for (const child of node.children) {\n    this.print(child, node);\n  }\n  this.dedent();\n\n  this.print(node.closingElement, node);\n}\n\nfunction spaceSeparator(this: Printer) {\n  this.space();\n}\n\nexport function JSXOpeningElement(this: Printer, node: t.JSXOpeningElement) {\n  this.token(\"<\");\n  this.print(node.name, node);\n  this.print(node.typeParameters, node); // TS\n  if (node.attributes.length > 0) {\n    this.space();\n    this.printJoin(node.attributes, node, { separator: spaceSeparator });\n  }\n  if (node.selfClosing) {\n    this.space();\n    this.token(\"/>\");\n  } else {\n    this.token(\">\");\n  }\n}\n\nexport function JSXClosingElement(this: Printer, node: t.JSXClosingElement) {\n  this.token(\"</\");\n  this.print(node.name, node);\n  this.token(\">\");\n}\n\nexport function JSXEmptyExpression(this: Printer) {\n  // This node is empty, so forcefully print its inner comments.\n  this.printInnerComments();\n}\n\nexport function JSXFragment(this: Printer, node: t.JSXFragment) {\n  this.print(node.openingFragment, node);\n\n  this.indent();\n  for (const child of node.children) {\n    this.print(child, node);\n  }\n  this.dedent();\n\n  this.print(node.closingFragment, node);\n}\n\nexport function JSXOpeningFragment(this: Printer) {\n  this.token(\"<\");\n  this.token(\">\");\n}\n\nexport function JSXClosingFragment(this: Printer) {\n  this.token(\"</\");\n  this.token(\">\");\n}\n","import type Printer from \"../printer.ts\";\nimport type * as t from \"@babel/types\";\n\nexport function TSTypeAnnotation(this: Printer, node: t.TSTypeAnnotation) {\n  this.token(\":\");\n  this.space();\n  // @ts-expect-error todo(flow->ts) can this be removed? `.optional` looks to be not existing property\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSTypeParameterInstantiation(\n  this: Printer,\n  node: t.TSTypeParameterInstantiation,\n  parent: t.Node,\n): void {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  if (parent.type === \"ArrowFunctionExpression\" && node.params.length === 1) {\n    this.token(\",\");\n  }\n  this.token(\">\");\n}\n\nexport { TSTypeParameterInstantiation as TSTypeParameterDeclaration };\n\nexport function TSTypeParameter(this: Printer, node: t.TSTypeParameter) {\n  if (node.in) {\n    this.word(\"in\");\n    this.space();\n  }\n\n  if (node.out) {\n    this.word(\"out\");\n    this.space();\n  }\n\n  this.word(\n    !process.env.BABEL_8_BREAKING\n      ? (node.name as unknown as string)\n      : (node.name as unknown as t.Identifier).name,\n  );\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nexport function TSParameterProperty(\n  this: Printer,\n  node: t.TSParameterProperty,\n) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nexport function TSDeclareFunction(\n  this: Printer,\n  node: t.TSDeclareFunction,\n  parent: t.ParentMaps[\"TSDeclareFunction\"],\n) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this._functionHead(node, parent);\n  this.token(\";\");\n}\n\nexport function TSDeclareMethod(this: Printer, node: t.TSDeclareMethod) {\n  this._classMethodHead(node);\n  this.token(\";\");\n}\n\nexport function TSQualifiedName(this: Printer, node: t.TSQualifiedName) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nexport function TSCallSignatureDeclaration(\n  this: Printer,\n  node: t.TSCallSignatureDeclaration,\n) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSConstructSignatureDeclaration(\n  this: Printer,\n  node: t.TSConstructSignatureDeclaration,\n) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSPropertySignature(\n  this: Printer,\n  node: t.TSPropertySignature,\n) {\n  const { readonly } = node;\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nexport function tsPrintPropertyOrMethodName(\n  this: Printer,\n  node: t.TSPropertySignature | t.TSMethodSignature,\n) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n  this.print(node.key, node);\n  if (node.computed) {\n    this.token(\"]\");\n  }\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nexport function TSMethodSignature(this: Printer, node: t.TSMethodSignature) {\n  const { kind } = node;\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSIndexSignature(this: Printer, node: t.TSIndexSignature) {\n  const { readonly, static: isStatic } = node;\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n  this.token(\"[\");\n  this._parameters(node.parameters, node);\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nexport function TSAnyKeyword(this: Printer) {\n  this.word(\"any\");\n}\nexport function TSBigIntKeyword(this: Printer) {\n  this.word(\"bigint\");\n}\nexport function TSUnknownKeyword(this: Printer) {\n  this.word(\"unknown\");\n}\nexport function TSNumberKeyword(this: Printer) {\n  this.word(\"number\");\n}\nexport function TSObjectKeyword(this: Printer) {\n  this.word(\"object\");\n}\nexport function TSBooleanKeyword(this: Printer) {\n  this.word(\"boolean\");\n}\nexport function TSStringKeyword(this: Printer) {\n  this.word(\"string\");\n}\nexport function TSSymbolKeyword(this: Printer) {\n  this.word(\"symbol\");\n}\nexport function TSVoidKeyword(this: Printer) {\n  this.word(\"void\");\n}\nexport function TSUndefinedKeyword(this: Printer) {\n  this.word(\"undefined\");\n}\nexport function TSNullKeyword(this: Printer) {\n  this.word(\"null\");\n}\nexport function TSNeverKeyword(this: Printer) {\n  this.word(\"never\");\n}\nexport function TSIntrinsicKeyword(this: Printer) {\n  this.word(\"intrinsic\");\n}\n\nexport function TSThisType(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function TSFunctionType(this: Printer, node: t.TSFunctionType) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nexport function TSConstructorType(this: Printer, node: t.TSConstructorType) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nexport function tsPrintFunctionOrConstructorType(\n  this: Printer,\n  node: t.TSFunctionType | t.TSConstructorType,\n) {\n  const { typeParameters } = node;\n  const parameters = process.env.BABEL_8_BREAKING\n    ? // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST shape\n      node.params\n    : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST shape\n      node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n  this._parameters(parameters, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  const returnType = process.env.BABEL_8_BREAKING\n    ? // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST shape\n      node.returnType\n    : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST shape\n      node.typeAnnotation;\n  this.print(returnType.typeAnnotation, node);\n}\n\nexport function TSTypeReference(this: Printer, node: t.TSTypeReference) {\n  this.print(node.typeName, node, true);\n  this.print(node.typeParameters, node, true);\n}\n\nexport function TSTypePredicate(this: Printer, node: t.TSTypePredicate) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n  this.print(node.parameterName);\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nexport function TSTypeQuery(this: Printer, node: t.TSTypeQuery) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n\n  if (node.typeParameters) {\n    this.print(node.typeParameters, node);\n  }\n}\n\nexport function TSTypeLiteral(this: Printer, node: t.TSTypeLiteral) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nexport function tsPrintTypeLiteralOrInterfaceBody(\n  this: Printer,\n  members: t.TSTypeElement[],\n  node: t.TSType | t.TSInterfaceBody,\n) {\n  tsPrintBraced(this, members, node);\n}\n\nfunction tsPrintBraced(printer: Printer, members: t.Node[], node: t.Node) {\n  printer.token(\"{\");\n  if (members.length) {\n    printer.indent();\n    printer.newline();\n    for (const member of members) {\n      printer.print(member, node);\n      //this.token(sep);\n      printer.newline();\n    }\n    printer.dedent();\n  }\n\n  printer.rightBrace(node);\n}\n\nexport function TSArrayType(this: Printer, node: t.TSArrayType) {\n  this.print(node.elementType, node, true);\n\n  this.token(\"[]\");\n}\n\nexport function TSTupleType(this: Printer, node: t.TSTupleType) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nexport function TSOptionalType(this: Printer, node: t.TSOptionalType) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nexport function TSRestType(this: Printer, node: t.TSRestType) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSNamedTupleMember(this: Printer, node: t.TSNamedTupleMember) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nexport function TSUnionType(this: Printer, node: t.TSUnionType) {\n  tsPrintUnionOrIntersectionType(this, node, \"|\");\n}\n\nexport function TSIntersectionType(this: Printer, node: t.TSIntersectionType) {\n  tsPrintUnionOrIntersectionType(this, node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(\n  printer: Printer,\n  node: t.TSUnionType | t.TSIntersectionType,\n  sep: \"|\" | \"&\",\n) {\n  printer.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    },\n  });\n}\n\nexport function TSConditionalType(this: Printer, node: t.TSConditionalType) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nexport function TSInferType(this: Printer, node: t.TSInferType) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nexport function TSParenthesizedType(\n  this: Printer,\n  node: t.TSParenthesizedType,\n) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nexport function TSTypeOperator(this: Printer, node: t.TSTypeOperator) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSIndexedAccessType(\n  this: Printer,\n  node: t.TSIndexedAccessType,\n) {\n  this.print(node.objectType, node, true);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nexport function TSMappedType(this: Printer, node: t.TSMappedType) {\n  const { nameType, optional, readonly, typeParameter, typeAnnotation } = node;\n  this.token(\"{\");\n  this.space();\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(\n    !process.env.BABEL_8_BREAKING\n      ? (typeParameter.name as unknown as string)\n      : (typeParameter.name as unknown as t.Identifier).name,\n  );\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  if (typeAnnotation) {\n    this.token(\":\");\n    this.space();\n    this.print(typeAnnotation, node);\n  }\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self: Printer, tok: true | \"+\" | \"-\") {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nexport function TSLiteralType(this: Printer, node: t.TSLiteralType) {\n  this.print(node.literal, node);\n}\n\nexport function TSExpressionWithTypeArguments(\n  this: Printer,\n  node: t.TSExpressionWithTypeArguments,\n) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nexport function TSInterfaceDeclaration(\n  this: Printer,\n  node: t.TSInterfaceDeclaration,\n) {\n  const { declare, id, typeParameters, extends: extendz, body } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  if (extendz?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n  this.space();\n  this.print(body, node);\n}\n\nexport function TSInterfaceBody(this: Printer, node: t.TSInterfaceBody) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nexport function TSTypeAliasDeclaration(\n  this: Printer,\n  node: t.TSTypeAliasDeclaration,\n) {\n  const { declare, id, typeParameters, typeAnnotation } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSTypeExpression(\n  this: Printer,\n  node: t.TSAsExpression | t.TSSatisfiesExpression,\n) {\n  const { type, expression, typeAnnotation } = node;\n  const forceParens = !!expression.trailingComments?.length;\n  this.print(expression, node, true, undefined, forceParens);\n  this.space();\n  this.word(type === \"TSAsExpression\" ? \"as\" : \"satisfies\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nexport {\n  TSTypeExpression as TSAsExpression,\n  TSTypeExpression as TSSatisfiesExpression,\n};\n\nexport function TSTypeAssertion(this: Printer, node: t.TSTypeAssertion) {\n  const { typeAnnotation, expression } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nexport function TSInstantiationExpression(\n  this: Printer,\n  node: t.TSInstantiationExpression,\n) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nexport function TSEnumDeclaration(this: Printer, node: t.TSEnumDeclaration) {\n  const { declare, const: isConst, id, members } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  tsPrintBraced(this, members, node);\n}\n\nexport function TSEnumMember(this: Printer, node: t.TSEnumMember) {\n  const { id, initializer } = node;\n  this.print(id, node);\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n  this.token(\",\");\n}\n\nexport function TSModuleDeclaration(\n  this: Printer,\n  node: t.TSModuleDeclaration,\n) {\n  const { declare, id } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nexport function TSModuleBlock(this: Printer, node: t.TSModuleBlock) {\n  tsPrintBraced(this, node.body, node);\n}\n\nexport function TSImportType(this: Printer, node: t.TSImportType) {\n  const { argument, qualifier, typeParameters } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nexport function TSImportEqualsDeclaration(\n  this: Printer,\n  node: t.TSImportEqualsDeclaration,\n) {\n  const { isExport, id, moduleReference } = node;\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nexport function TSExternalModuleReference(\n  this: Printer,\n  node: t.TSExternalModuleReference,\n) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nexport function TSNonNullExpression(\n  this: Printer,\n  node: t.TSNonNullExpression,\n) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nexport function TSExportAssignment(this: Printer, node: t.TSExportAssignment) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nexport function TSNamespaceExportDeclaration(\n  this: Printer,\n  node: t.TSNamespaceExportDeclaration,\n) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nexport function tsPrintSignatureDeclarationBase(this: Printer, node: any) {\n  const { typeParameters } = node;\n  const parameters = process.env.BABEL_8_BREAKING\n    ? node.params\n    : node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n  this._parameters(parameters, node);\n  this.token(\")\");\n  const returnType = process.env.BABEL_8_BREAKING\n    ? node.returnType\n    : node.typeAnnotation;\n  this.print(returnType, node);\n}\n\nexport function tsPrintClassMemberModifiers(\n  this: Printer,\n  node:\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.TSDeclareMethod,\n) {\n  const isField =\n    node.type === \"ClassAccessorProperty\" || node.type === \"ClassProperty\";\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}\n","import Buffer, { type Pos } from \"./buffer.ts\";\nimport type { Loc } from \"./buffer.ts\";\nimport * as n from \"./node/index.ts\";\nimport type * as t from \"@babel/types\";\nimport {\n  isFunction,\n  isStatement,\n  isClassBody,\n  isTSInterfaceBody,\n  isTSEnumDeclaration,\n} from \"@babel/types\";\nimport type { Opts as jsescOptions } from \"jsesc\";\n\nimport type { GeneratorOptions } from \"./index.ts\";\nimport * as generatorFunctions from \"./generators/index.ts\";\nimport type SourceMap from \"./source-map.ts\";\nimport type { TraceMap } from \"@jridgewell/trace-mapping\";\n\n// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst HAS_NEWLINE = /[\\n\\r\\u2028\\u2029]/;\nconst HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\\n\\r\\u2028\\u2029]|\\*\\//;\n\nconst { needsParens } = n;\n\nconst enum COMMENT_TYPE {\n  LEADING,\n  INNER,\n  TRAILING,\n}\n\nconst enum COMMENT_SKIP_NEWLINE {\n  DEFAULT,\n  ALL,\n  LEADING,\n  TRAILING,\n}\n\nconst enum PRINT_COMMENT_HINT {\n  SKIP,\n  ALLOW,\n  DEFER,\n}\n\nexport type Format = {\n  shouldPrintComment: (comment: string) => boolean;\n  retainLines: boolean;\n  retainFunctionParens: boolean;\n  comments: boolean;\n  auxiliaryCommentBefore: string;\n  auxiliaryCommentAfter: string;\n  compact: boolean | \"auto\";\n  minified: boolean;\n  concise: boolean;\n  indent: {\n    adjustMultilineComment: boolean;\n    style: string;\n  };\n  /**\n   * @deprecated Removed in Babel 8, syntax type is always 'hash'\n   */\n  recordAndTupleSyntaxType?: GeneratorOptions[\"recordAndTupleSyntaxType\"];\n  jsescOption: jsescOptions;\n  /**\n   * @deprecated Removed in Babel 8, use `jsescOption` instead\n   */\n  jsonCompatibleStrings?: boolean;\n  /**\n   * For use with the Hack-style pipe operator.\n   * Changes what token is used for pipe bodies’ topic references.\n   */\n  topicToken?: GeneratorOptions[\"topicToken\"];\n  /**\n   * @deprecated Removed in Babel 8\n   */\n  decoratorsBeforeExport?: boolean;\n  /**\n   * The import attributes syntax style:\n   * - \"with\"        : `import { a } from \"b\" with { type: \"json\" };`\n   * - \"assert\"      : `import { a } from \"b\" assert { type: \"json\" };`\n   * - \"with-legacy\" : `import { a } from \"b\" with type: \"json\";`\n   */\n  importAttributesKeyword?: \"with\" | \"assert\" | \"with-legacy\";\n};\n\ninterface AddNewlinesOptions {\n  addNewlines(leading: boolean, node: t.Node): number;\n  nextNodeStartLine: number;\n}\n\ninterface PrintSequenceOptions extends Partial<AddNewlinesOptions> {\n  statement?: boolean;\n  indent?: boolean;\n  trailingCommentsLineOffset?: number;\n}\n\ninterface PrintListOptions {\n  separator?: (this: Printer) => void;\n  iterator?: (node: t.Node, index: number) => void;\n  statement?: boolean;\n  indent?: boolean;\n}\n\nexport type PrintJoinOptions = PrintListOptions & PrintSequenceOptions;\nclass Printer {\n  constructor(format: Format, map: SourceMap) {\n    this.format = format;\n\n    this._indentRepeat = format.indent.style.length;\n\n    this._inputMap = map?._inputMap;\n\n    this._buf = new Buffer(map, format.indent.style[0]);\n  }\n  declare _inputMap: TraceMap;\n\n  declare format: Format;\n\n  inForStatementInit: boolean = false;\n  enterForStatementInit(val: boolean) {\n    const old = this.inForStatementInit;\n    if (old === val) return () => {};\n    this.inForStatementInit = val;\n    return () => {\n      this.inForStatementInit = old;\n    };\n  }\n\n  tokenContext: number = 0;\n\n  declare _buf: Buffer;\n  _currentNode: t.Node = null;\n  _indent: number = 0;\n  _indentRepeat: number = 0;\n  _insideAux: boolean = false;\n  _parenPushNewlineState: { printed: boolean } | null = null;\n  _noLineTerminator: boolean = false;\n  _printAuxAfterOnNextUserNode: boolean = false;\n  _printedComments = new Set<t.Comment>();\n  _endsWithInteger = false;\n  _endsWithWord = false;\n  _lastCommentLine = 0;\n  _endsWithInnerRaw: boolean = false;\n  _indentInnerComments: boolean = true;\n\n  generate(ast: t.Node) {\n    this.print(ast);\n    this._maybeAddAuxComment();\n\n    return this._buf.get();\n  }\n\n  /**\n   * Increment indent size.\n   */\n\n  indent(): void {\n    if (this.format.compact || this.format.concise) return;\n\n    this._indent++;\n  }\n\n  /**\n   * Decrement indent size.\n   */\n\n  dedent(): void {\n    if (this.format.compact || this.format.concise) return;\n\n    this._indent--;\n  }\n\n  /**\n   * Add a semicolon to the buffer.\n   */\n\n  semicolon(force: boolean = false): void {\n    this._maybeAddAuxComment();\n    if (force) {\n      this._appendChar(charCodes.semicolon);\n    } else {\n      this._queue(charCodes.semicolon);\n    }\n    this._noLineTerminator = false;\n  }\n\n  /**\n   * Add a right brace to the buffer.\n   */\n\n  rightBrace(node: t.Node): void {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n    this.sourceWithOffset(\"end\", node.loc, -1);\n    this.token(\"}\");\n  }\n\n  rightParens(node: t.Node): void {\n    this.sourceWithOffset(\"end\", node.loc, -1);\n    this.token(\")\");\n  }\n\n  /**\n   * Add a space to the buffer unless it is compact.\n   */\n\n  space(force: boolean = false): void {\n    if (this.format.compact) return;\n\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n      if (lastCp !== charCodes.space && lastCp !== charCodes.lineFeed) {\n        this._space();\n      }\n    }\n  }\n\n  /**\n   * Writes a token that can't be safely parsed without taking whitespace into account.\n   */\n\n  word(str: string, noLineTerminatorAfter: boolean = false): void {\n    this.tokenContext = 0;\n\n    this._maybePrintInnerComments();\n\n    // prevent concatenating words and creating // comment out of division and regex\n    if (\n      this._endsWithWord ||\n      (str.charCodeAt(0) === charCodes.slash && this.endsWith(charCodes.slash))\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._append(str, false);\n\n    this._endsWithWord = true;\n    this._noLineTerminator = noLineTerminatorAfter;\n  }\n\n  /**\n   * Writes a number token so that we can validate if it is an integer.\n   */\n\n  number(str: string, number?: number): void {\n    // const NON_DECIMAL_LITERAL = /^0[box]/;\n    function isNonDecimalLiteral(str: string) {\n      if (str.length > 2 && str.charCodeAt(0) === charCodes.digit0) {\n        const secondChar = str.charCodeAt(1);\n        return (\n          secondChar === charCodes.lowercaseB ||\n          secondChar === charCodes.lowercaseO ||\n          secondChar === charCodes.lowercaseX\n        );\n      }\n      return false;\n    }\n    this.word(str);\n\n    // Integer tokens need special handling because they cannot have '.'s inserted\n    // immediately after them.\n    this._endsWithInteger =\n      Number.isInteger(number) &&\n      !isNonDecimalLiteral(str) &&\n      !SCIENTIFIC_NOTATION.test(str) &&\n      !ZERO_DECIMAL_INTEGER.test(str) &&\n      str.charCodeAt(str.length - 1) !== charCodes.dot;\n  }\n\n  /**\n   * Writes a simple token.\n   */\n  token(str: string, maybeNewline = false): void {\n    this.tokenContext = 0;\n\n    this._maybePrintInnerComments();\n\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n    if (\n      (lastChar === charCodes.exclamationMark &&\n        // space is mandatory to avoid outputting <!--\n        // http://javascript.spec.whatwg.org/#comment-syntax\n        (str === \"--\" ||\n          // Needs spaces to avoid changing a! == 0 to a!== 0\n          strFirst === charCodes.equalsTo)) ||\n      // Need spaces for operators of the same kind to avoid: `a+++b`\n      (strFirst === charCodes.plusSign && lastChar === charCodes.plusSign) ||\n      (strFirst === charCodes.dash && lastChar === charCodes.dash) ||\n      // Needs spaces to avoid changing '34' to '34.', which would still be a valid number.\n      (strFirst === charCodes.dot && this._endsWithInteger)\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._append(str, maybeNewline);\n    this._noLineTerminator = false;\n  }\n\n  tokenChar(char: number): void {\n    this.tokenContext = 0;\n\n    this._maybePrintInnerComments();\n\n    const lastChar = this.getLastChar();\n    if (\n      // Need spaces for operators of the same kind to avoid: `a+++b`\n      (char === charCodes.plusSign && lastChar === charCodes.plusSign) ||\n      (char === charCodes.dash && lastChar === charCodes.dash) ||\n      // Needs spaces to avoid changing '34' to '34.', which would still be a valid number.\n      (char === charCodes.dot && this._endsWithInteger)\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._appendChar(char);\n    this._noLineTerminator = false;\n  }\n\n  /**\n   * Add a newline (or many newlines), maintaining formatting.\n   * This function checks the number of newlines in the queue and subtracts them.\n   * It currently has some limitations.\n   * @see {Buffer#getNewlineCount}\n   */\n  newline(i: number = 1, force?: boolean): void {\n    if (i <= 0) return;\n\n    if (!force) {\n      if (this.format.retainLines || this.format.compact) return;\n\n      if (this.format.concise) {\n        this.space();\n        return;\n      }\n    }\n\n    if (i > 2) i = 2; // Max two lines\n\n    i -= this._buf.getNewlineCount();\n\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n\n    return;\n  }\n\n  endsWith(char: number): boolean {\n    return this.getLastChar() === char;\n  }\n\n  getLastChar(): number {\n    return this._buf.getLastChar();\n  }\n\n  endsWithCharAndNewline(): number {\n    return this._buf.endsWithCharAndNewline();\n  }\n\n  removeTrailingNewline(): void {\n    this._buf.removeTrailingNewline();\n  }\n\n  exactSource(loc: Loc | undefined, cb: () => void) {\n    if (!loc) {\n      cb();\n      return;\n    }\n\n    this._catchUp(\"start\", loc);\n\n    this._buf.exactSource(loc, cb);\n  }\n\n  source(prop: \"start\" | \"end\", loc: Loc | undefined): void {\n    if (!loc) return;\n\n    this._catchUp(prop, loc);\n\n    this._buf.source(prop, loc);\n  }\n\n  sourceWithOffset(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    columnOffset: number,\n  ): void {\n    if (!loc) return;\n\n    this._catchUp(prop, loc);\n\n    this._buf.sourceWithOffset(prop, loc, columnOffset);\n  }\n\n  sourceIdentifierName(identifierName: string, pos?: Pos): void {\n    if (!this._buf._canMarkIdName) return;\n\n    const sourcePosition = this._buf._sourcePosition;\n    sourcePosition.identifierNamePos = pos;\n    sourcePosition.identifierName = identifierName;\n  }\n\n  _space(): void {\n    this._queue(charCodes.space);\n  }\n\n  _newline(): void {\n    this._queue(charCodes.lineFeed);\n  }\n\n  _append(str: string, maybeNewline: boolean): void {\n    this._maybeAddParen(str);\n    this._maybeIndent(str.charCodeAt(0));\n\n    this._buf.append(str, maybeNewline);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _appendChar(char: number): void {\n    this._maybeAddParenChar(char);\n    this._maybeIndent(char);\n\n    this._buf.appendChar(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _queue(char: number) {\n    this._maybeAddParenChar(char);\n    this._maybeIndent(char);\n\n    this._buf.queue(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _maybeIndent(firstChar: number): void {\n    // we've got a newline before us so prepend on the indentation\n    if (\n      this._indent &&\n      firstChar !== charCodes.lineFeed &&\n      this.endsWith(charCodes.lineFeed)\n    ) {\n      this._buf.queueIndentation(this._getIndent());\n    }\n  }\n\n  _shouldIndent(firstChar: number) {\n    // we've got a newline before us so prepend on the indentation\n    if (\n      this._indent &&\n      firstChar !== charCodes.lineFeed &&\n      this.endsWith(charCodes.lineFeed)\n    ) {\n      return true;\n    }\n  }\n\n  _maybeAddParenChar(char: number): void {\n    // see startTerminatorless() instance method\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    // This function does two things:\n    // - If needed, prints a parenthesis\n    // - If the currently printed string removes the need for the paren,\n    //   it resets the _parenPushNewlineState field.\n    //   Almost everything removes the need for a paren, except for\n    //   comments and whitespaces.\n\n    if (char === charCodes.space) {\n      // Whitespaces only, the parentheses might still be needed.\n      return;\n    }\n\n    // Check for newline or comment.\n    if (char !== charCodes.lineFeed) {\n      this._parenPushNewlineState = null;\n      return;\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _maybeAddParen(str: string): void {\n    // see startTerminatorless() instance method\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    // This function does two things:\n    // - If needed, prints a parenthesis\n    // - If the currently printed string removes the need for the paren,\n    //   it resets the _parenPushNewlineState field.\n    //   Almost everything removes the need for a paren, except for\n    //   comments and whitespaces.\n\n    const len = str.length;\n\n    let i;\n    for (i = 0; i < len && str.charCodeAt(i) === charCodes.space; i++) continue;\n    if (i === len) {\n      // Whitespaces only, the parentheses might still be needed.\n      return;\n    }\n\n    // Check for newline or comment.\n    const cha = str.charCodeAt(i);\n    if (cha !== charCodes.lineFeed) {\n      if (\n        // This is not a comment (it doesn't start with /)\n        cha !== charCodes.slash ||\n        // This is not a comment (it's a / operator)\n        i + 1 === len\n      ) {\n        // After a normal token, the parentheses aren't needed anymore\n        this._parenPushNewlineState = null;\n        return;\n      }\n\n      const chaPost = str.charCodeAt(i + 1);\n\n      if (chaPost === charCodes.asterisk) {\n        // This is a block comment\n        return;\n      } else if (chaPost !== charCodes.slash) {\n        // This is neither a block comment, nor a line comment.\n        // After a normal token, the parentheses aren't needed anymore\n        this._parenPushNewlineState = null;\n        return;\n      }\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  catchUp(line: number) {\n    if (!this.format.retainLines) return;\n\n    // catch up to this nodes newline if we're behind\n    const count = line - this._buf.getCurrentLine();\n\n    for (let i = 0; i < count; i++) {\n      this._newline();\n    }\n  }\n\n  _catchUp(prop: \"start\" | \"end\", loc?: Loc) {\n    if (!this.format.retainLines) return;\n\n    // catch up to this nodes newline if we're behind\n    const line = loc?.[prop]?.line;\n    if (line != null) {\n      const count = line - this._buf.getCurrentLine();\n\n      for (let i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  }\n\n  /**\n   * Get the current indent.\n   */\n\n  _getIndent(): number {\n    return this._indentRepeat * this._indent;\n  }\n\n  printTerminatorless(node: t.Node, parent: t.Node, isLabel: boolean) {\n    /**\n     * Set some state that will be modified if a newline has been inserted before any\n     * non-space characters.\n     *\n     * This is to prevent breaking semantics for terminatorless separator nodes. eg:\n     *\n     *   return foo;\n     *\n     * returns `foo`. But if we do:\n     *\n     *   return\n     *   foo;\n     *\n     *  `undefined` will be returned and not `foo` due to the terminator.\n     */\n    if (isLabel) {\n      this._noLineTerminator = true;\n      this.print(node, parent);\n    } else {\n      const terminatorState = {\n        printed: false,\n      };\n      this._parenPushNewlineState = terminatorState;\n      this.print(node, parent);\n      /**\n       * Print an ending parentheses if a starting one has been printed.\n       */\n      if (terminatorState.printed) {\n        this.dedent();\n        this.newline();\n        this.token(\")\");\n      }\n    }\n  }\n\n  print(\n    node: t.Node | null,\n    parent?: t.Node,\n    noLineTerminatorAfter?: boolean,\n    // trailingCommentsLineOffset also used to check if called from printJoin\n    // it will be ignored if `noLineTerminatorAfter||this._noLineTerminator`\n    trailingCommentsLineOffset?: number,\n    forceParens?: boolean,\n  ) {\n    if (!node) return;\n\n    this._endsWithInnerRaw = false;\n\n    const nodeType = node.type;\n    const format = this.format;\n\n    const oldConcise = format.concise;\n    if (\n      // @ts-expect-error document _compact AST properties\n      node._compact\n    ) {\n      format.concise = true;\n    }\n\n    const printMethod =\n      this[\n        nodeType as Exclude<\n          t.Node[\"type\"],\n          // removed\n          | \"Noop\"\n          // renamed\n          | t.DeprecatedAliases[\"type\"]\n        >\n      ];\n    if (printMethod === undefined) {\n      throw new ReferenceError(\n        `unknown node of type ${JSON.stringify(\n          nodeType,\n        )} with constructor ${JSON.stringify(node.constructor.name)}`,\n      );\n    }\n\n    const oldNode = this._currentNode;\n    this._currentNode = node;\n\n    const oldInAux = this._insideAux;\n    this._insideAux = node.loc == null;\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n    const parenthesized = node.extra?.parenthesized as boolean | undefined;\n    let shouldPrintParens =\n      forceParens ||\n      (parenthesized &&\n        format.retainFunctionParens &&\n        nodeType === \"FunctionExpression\") ||\n      needsParens(node, parent, this.tokenContext, this.inForStatementInit);\n\n    if (\n      !shouldPrintParens &&\n      parenthesized &&\n      node.leadingComments?.length &&\n      node.leadingComments[0].type === \"CommentBlock\"\n    ) {\n      const parentType = parent?.type;\n      switch (parentType) {\n        case \"ExpressionStatement\":\n        case \"VariableDeclarator\":\n        case \"AssignmentExpression\":\n        case \"ReturnStatement\":\n          break;\n        case \"CallExpression\":\n        case \"OptionalCallExpression\":\n        case \"NewExpression\":\n          if (parent.callee !== node) break;\n        // falls through\n        default:\n          shouldPrintParens = true;\n      }\n    }\n\n    let exitInForStatementInit;\n    if (shouldPrintParens) {\n      this.token(\"(\");\n      this._endsWithInnerRaw = false;\n      exitInForStatementInit = this.enterForStatementInit(false);\n    }\n\n    this._lastCommentLine = 0;\n\n    this._printLeadingComments(node, parent);\n\n    const loc = nodeType === \"Program\" || nodeType === \"File\" ? null : node.loc;\n\n    this.exactSource(\n      loc,\n      // We must use @ts-ignore because this error appears in VSCode but not\n      // when doing a full build?\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore https://github.com/microsoft/TypeScript/issues/58468\n      printMethod.bind(this, node, parent),\n    );\n\n    if (shouldPrintParens) {\n      this._printTrailingComments(node, parent);\n      this.token(\")\");\n      this._noLineTerminator = noLineTerminatorAfter;\n      exitInForStatementInit();\n    } else if (noLineTerminatorAfter && !this._noLineTerminator) {\n      this._noLineTerminator = true;\n      this._printTrailingComments(node, parent);\n    } else {\n      this._printTrailingComments(node, parent, trailingCommentsLineOffset);\n    }\n\n    // end\n    this._currentNode = oldNode;\n    format.concise = oldConcise;\n    this._insideAux = oldInAux;\n\n    this._endsWithInnerRaw = false;\n  }\n\n  _maybeAddAuxComment(enteredPositionlessNode?: boolean) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n\n    const comment = this.format.auxiliaryCommentBefore;\n    if (comment) {\n      this._printComment(\n        {\n          type: \"CommentBlock\",\n          value: comment,\n        },\n        COMMENT_SKIP_NEWLINE.DEFAULT,\n      );\n    }\n  }\n\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n\n    const comment = this.format.auxiliaryCommentAfter;\n    if (comment) {\n      this._printComment(\n        {\n          type: \"CommentBlock\",\n          value: comment,\n        },\n        COMMENT_SKIP_NEWLINE.DEFAULT,\n      );\n    }\n  }\n\n  getPossibleRaw(\n    node:\n      | t.StringLiteral\n      | t.NumericLiteral\n      | t.BigIntLiteral\n      | t.DecimalLiteral\n      | t.DirectiveLiteral\n      | t.JSXText,\n  ): string | undefined {\n    const extra = node.extra;\n    if (\n      extra?.raw != null &&\n      extra.rawValue != null &&\n      node.value === extra.rawValue\n    ) {\n      // @ts-expect-error: The extra.raw of these AST node types must be a string\n      return extra.raw;\n    }\n  }\n\n  printJoin(\n    nodes: Array<t.Node> | undefined | null,\n    parent: t.Node,\n    opts: PrintJoinOptions = {},\n  ) {\n    if (!nodes?.length) return;\n\n    let { indent } = opts;\n\n    if (indent == null && this.format.retainLines) {\n      const startLine = nodes[0].loc?.start.line;\n      if (startLine != null && startLine !== this._buf.getCurrentLine()) {\n        indent = true;\n      }\n    }\n\n    if (indent) this.indent();\n\n    const newlineOpts: AddNewlinesOptions = {\n      addNewlines: opts.addNewlines,\n      nextNodeStartLine: 0,\n    };\n\n    const separator = opts.separator ? opts.separator.bind(this) : null;\n\n    const len = nodes.length;\n    for (let i = 0; i < len; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n\n      if (opts.statement) this._printNewline(i === 0, newlineOpts);\n\n      this.print(node, parent, undefined, opts.trailingCommentsLineOffset || 0);\n\n      opts.iterator?.(node, i);\n\n      if (i < len - 1) separator?.();\n\n      if (opts.statement) {\n        if (!node.trailingComments?.length) {\n          this._lastCommentLine = 0;\n        }\n\n        if (i + 1 === len) {\n          this.newline(1);\n        } else {\n          const nextNode = nodes[i + 1];\n          newlineOpts.nextNodeStartLine = nextNode.loc?.start.line || 0;\n\n          this._printNewline(true, newlineOpts);\n        }\n      }\n    }\n\n    if (indent) this.dedent();\n  }\n\n  printAndIndentOnComments(node: t.Node, parent: t.Node) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  }\n\n  printBlock(parent: Extract<t.Node, { body: t.Statement }>) {\n    const node = parent.body;\n\n    if (node.type !== \"EmptyStatement\") {\n      this.space();\n    }\n\n    this.print(node, parent);\n  }\n\n  _printTrailingComments(node: t.Node, parent?: t.Node, lineOffset?: number) {\n    const { innerComments, trailingComments } = node;\n    // We print inner comments here, so that if for some reason they couldn't\n    // be printed in earlier locations they are still printed *somewhere*,\n    // even if at the end of the node.\n    if (innerComments?.length) {\n      this._printComments(\n        COMMENT_TYPE.TRAILING,\n        innerComments,\n        node,\n        parent,\n        lineOffset,\n      );\n    }\n    if (trailingComments?.length) {\n      this._printComments(\n        COMMENT_TYPE.TRAILING,\n        trailingComments,\n        node,\n        parent,\n        lineOffset,\n      );\n    }\n  }\n\n  _printLeadingComments(node: t.Node, parent: t.Node) {\n    const comments = node.leadingComments;\n    if (!comments?.length) return;\n    this._printComments(COMMENT_TYPE.LEADING, comments, node, parent);\n  }\n\n  _maybePrintInnerComments() {\n    if (this._endsWithInnerRaw) this.printInnerComments();\n    this._endsWithInnerRaw = true;\n    this._indentInnerComments = true;\n  }\n\n  printInnerComments() {\n    const node = this._currentNode;\n    const comments = node.innerComments;\n    if (!comments?.length) return;\n\n    const hasSpace = this.endsWith(charCodes.space);\n    const indent = this._indentInnerComments;\n    const printedCommentsCount = this._printedComments.size;\n    if (indent) this.indent();\n    this._printComments(COMMENT_TYPE.INNER, comments, node);\n    if (hasSpace && printedCommentsCount !== this._printedComments.size) {\n      this.space();\n    }\n    if (indent) this.dedent();\n  }\n\n  noIndentInnerCommentsHere() {\n    this._indentInnerComments = false;\n  }\n\n  printSequence(\n    nodes: t.Node[],\n    parent: t.Node,\n    opts: PrintSequenceOptions = {},\n  ) {\n    opts.statement = true;\n    opts.indent ??= false;\n    this.printJoin(nodes, parent, opts);\n  }\n\n  printList(items: t.Node[], parent: t.Node, opts: PrintListOptions = {}) {\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n\n    this.printJoin(items, parent, opts);\n  }\n\n  _printNewline(newLine: boolean, opts: AddNewlinesOptions) {\n    const format = this.format;\n\n    // Fast path since 'this.newline' does nothing when not tracking lines.\n    if (format.retainLines || format.compact) return;\n\n    // Fast path for concise since 'this.newline' just inserts a space when\n    // concise formatting is in use.\n    if (format.concise) {\n      this.space();\n      return;\n    }\n\n    if (!newLine) {\n      return;\n    }\n\n    const startLine = opts.nextNodeStartLine;\n    const lastCommentLine = this._lastCommentLine;\n    if (startLine > 0 && lastCommentLine > 0) {\n      const offset = startLine - lastCommentLine;\n      if (offset >= 0) {\n        this.newline(offset || 1);\n        return;\n      }\n    }\n\n    // don't add newlines at the beginning of the file\n    if (this._buf.hasContent()) {\n      // Here is the logic of the original line wrapping according to the node layout, we are not using it now.\n      // We currently add at most one newline to each node in the list, ignoring `opts.addNewlines`.\n\n      // let lines = 0;\n      // if (!leading) lines++; // always include at least a single line after\n      // if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n\n      // const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n      // if (needs(node, parent)) lines++;\n\n      // this.newline(Math.min(2, lines));\n\n      this.newline(1);\n    }\n  }\n\n  // Returns `PRINT_COMMENT_HINT.DEFER` if the comment cannot be printed in this position due to\n  // line terminators, signaling that the print comments loop can stop and\n  // resume printing comments at the next possible position. This happens when\n  // printing inner comments, since if we have an inner comment with a multiline\n  // there is at least one inner position where line terminators are allowed.\n  _shouldPrintComment(comment: t.Comment): PRINT_COMMENT_HINT {\n    // Some plugins (such as flow-strip-types) use this to mark comments as removed using the AST-root 'comments' property,\n    // where they can't manually mutate the AST node comment lists.\n    if (comment.ignore) return PRINT_COMMENT_HINT.SKIP;\n\n    if (this._printedComments.has(comment)) return PRINT_COMMENT_HINT.SKIP;\n\n    if (\n      this._noLineTerminator &&\n      HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)\n    ) {\n      return PRINT_COMMENT_HINT.DEFER;\n    }\n\n    this._printedComments.add(comment);\n\n    if (!this.format.shouldPrintComment(comment.value)) {\n      return PRINT_COMMENT_HINT.SKIP;\n    }\n\n    return PRINT_COMMENT_HINT.ALLOW;\n  }\n\n  _printComment(comment: t.Comment, skipNewLines: COMMENT_SKIP_NEWLINE) {\n    const noLineTerminator = this._noLineTerminator;\n    const isBlockComment = comment.type === \"CommentBlock\";\n\n    // Add a newline before and after a block comment, unless explicitly\n    // disallowed\n    const printNewLines =\n      isBlockComment &&\n      skipNewLines !== COMMENT_SKIP_NEWLINE.ALL &&\n      !this._noLineTerminator;\n\n    if (\n      printNewLines &&\n      this._buf.hasContent() &&\n      skipNewLines !== COMMENT_SKIP_NEWLINE.LEADING\n    ) {\n      this.newline(1);\n    }\n\n    const lastCharCode = this.getLastChar();\n    if (\n      lastCharCode !== charCodes.leftSquareBracket &&\n      lastCharCode !== charCodes.leftCurlyBrace\n    ) {\n      this.space();\n    }\n\n    let val;\n    if (isBlockComment) {\n      const { _parenPushNewlineState } = this;\n      if (\n        _parenPushNewlineState?.printed === false &&\n        HAS_NEWLINE.test(comment.value)\n      ) {\n        this.token(\"(\");\n        this.indent();\n        _parenPushNewlineState.printed = true;\n      }\n      val = `/*${comment.value}*/`;\n      if (this.format.indent.adjustMultilineComment) {\n        const offset = comment.loc?.start.column;\n        if (offset) {\n          const newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n          val = val.replace(newlineRegex, \"\\n\");\n        }\n        if (this.format.concise) {\n          val = val.replace(/\\n(?!$)/g, `\\n`);\n        } else {\n          let indentSize = this.format.retainLines\n            ? 0\n            : this._buf.getCurrentColumn();\n\n          if (this._shouldIndent(charCodes.slash) || this.format.retainLines) {\n            indentSize += this._getIndent();\n          }\n\n          val = val.replace(/\\n(?!$)/g, `\\n${\" \".repeat(indentSize)}`);\n        }\n      }\n    } else if (!noLineTerminator) {\n      val = `//${comment.value}`;\n    } else {\n      // It was a single-line comment, so it's guaranteed to not\n      // contain newlines and it can be safely printed as a block\n      // comment.\n      val = `/*${comment.value}*/`;\n    }\n\n    // Avoid creating //* comments\n    if (this.endsWith(charCodes.slash)) this._space();\n\n    this.source(\"start\", comment.loc);\n    this._append(val, isBlockComment);\n\n    if (!isBlockComment && !noLineTerminator) {\n      this.newline(1, true);\n    }\n\n    if (printNewLines && skipNewLines !== COMMENT_SKIP_NEWLINE.TRAILING) {\n      this.newline(1);\n    }\n  }\n\n  _printComments(\n    type: COMMENT_TYPE,\n    comments: readonly t.Comment[],\n    node: t.Node,\n    parent?: t.Node,\n    lineOffset: number = 0,\n  ) {\n    const nodeLoc = node.loc;\n    const len = comments.length;\n    let hasLoc = !!nodeLoc;\n    const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;\n    const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;\n    let lastLine = 0;\n    let leadingCommentNewline = 0;\n\n    const maybeNewline = this._noLineTerminator\n      ? function () {}\n      : this.newline.bind(this);\n\n    for (let i = 0; i < len; i++) {\n      const comment = comments[i];\n\n      const shouldPrint = this._shouldPrintComment(comment);\n      if (shouldPrint === PRINT_COMMENT_HINT.DEFER) {\n        hasLoc = false;\n        break;\n      }\n      if (hasLoc && comment.loc && shouldPrint === PRINT_COMMENT_HINT.ALLOW) {\n        const commentStartLine = comment.loc.start.line;\n        const commentEndLine = comment.loc.end.line;\n        if (type === COMMENT_TYPE.LEADING) {\n          let offset = 0;\n          if (i === 0) {\n            // Because currently we cannot handle blank lines before leading comments,\n            // we always wrap before and after multi-line comments.\n            if (\n              this._buf.hasContent() &&\n              (comment.type === \"CommentLine\" ||\n                commentStartLine !== commentEndLine)\n            ) {\n              offset = leadingCommentNewline = 1;\n            }\n          } else {\n            offset = commentStartLine - lastLine;\n          }\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n\n          if (i + 1 === len) {\n            maybeNewline(\n              Math.max(nodeStartLine - lastLine, leadingCommentNewline),\n            );\n            lastLine = nodeStartLine;\n          }\n        } else if (type === COMMENT_TYPE.INNER) {\n          const offset =\n            commentStartLine - (i === 0 ? nodeStartLine : lastLine);\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n\n          if (i + 1 === len) {\n            maybeNewline(Math.min(1, nodeEndLine - lastLine)); // TODO: Improve here when inner comments processing is stronger\n            lastLine = nodeEndLine;\n          }\n        } else {\n          const offset =\n            commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n        }\n      } else {\n        hasLoc = false;\n        if (shouldPrint !== PRINT_COMMENT_HINT.ALLOW) {\n          continue;\n        }\n\n        if (len === 1) {\n          const singleLine = comment.loc\n            ? comment.loc.start.line === comment.loc.end.line\n            : !HAS_NEWLINE.test(comment.value);\n\n          const shouldSkipNewline =\n            singleLine &&\n            !isStatement(node) &&\n            !isClassBody(parent) &&\n            !isTSInterfaceBody(parent) &&\n            !isTSEnumDeclaration(parent);\n\n          if (type === COMMENT_TYPE.LEADING) {\n            this._printComment(\n              comment,\n              (shouldSkipNewline && node.type !== \"ObjectExpression\") ||\n                (singleLine && isFunction(parent, { body: node }))\n                ? COMMENT_SKIP_NEWLINE.ALL\n                : COMMENT_SKIP_NEWLINE.DEFAULT,\n            );\n          } else if (shouldSkipNewline && type === COMMENT_TYPE.TRAILING) {\n            this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n          } else {\n            this._printComment(comment, COMMENT_SKIP_NEWLINE.DEFAULT);\n          }\n        } else if (\n          type === COMMENT_TYPE.INNER &&\n          !(node.type === \"ObjectExpression\" && node.properties.length > 1) &&\n          node.type !== \"ClassBody\" &&\n          node.type !== \"TSInterfaceBody\"\n        ) {\n          // class X {\n          //   /*:: a: number*/\n          //   /*:: b: ?string*/\n          // }\n\n          this._printComment(\n            comment,\n            i === 0\n              ? COMMENT_SKIP_NEWLINE.LEADING\n              : i === len - 1\n                ? COMMENT_SKIP_NEWLINE.TRAILING\n                : COMMENT_SKIP_NEWLINE.DEFAULT,\n          );\n        } else {\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.DEFAULT);\n        }\n      }\n    }\n\n    if (type === COMMENT_TYPE.TRAILING && hasLoc && lastLine) {\n      this._lastCommentLine = lastLine;\n    }\n  }\n}\n\n// Expose the node type functions and helpers on the prototype for easy usage.\nObject.assign(Printer.prototype, generatorFunctions);\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-ignore(Babel 7 vs Babel 8) Babel 7 has Noop print method\n  Printer.prototype.Noop = function Noop(this: Printer) {};\n}\n\ntype GeneratorFunctions = typeof generatorFunctions;\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\ninterface Printer extends GeneratorFunctions {}\nexport default Printer;\n\nfunction commaSeparator(this: Printer) {\n  this.token(\",\");\n  this.space();\n}\n","import SourceMap from \"./source-map.ts\";\nimport Printer from \"./printer.ts\";\nimport type * as t from \"@babel/types\";\nimport type { Opts as jsescOptions } from \"jsesc\";\nimport type { Format } from \"./printer.ts\";\nimport type {\n  EncodedSourceMap,\n  DecodedSourceMap,\n  Mapping,\n} from \"@jridgewell/gen-mapping\";\n\n/**\n * Normalize generator options, setting defaults.\n *\n * - Detects code indentation.\n * - If `opts.compact = \"auto\"` and the code is over 500KB, `compact` will be set to `true`.\n */\n\nfunction normalizeOptions(\n  code: string | { [filename: string]: string },\n  opts: GeneratorOptions,\n): Format {\n  const format: Format = {\n    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n    shouldPrintComment: opts.shouldPrintComment,\n    retainLines: opts.retainLines,\n    retainFunctionParens: opts.retainFunctionParens,\n    comments: opts.comments == null || opts.comments,\n    compact: opts.compact,\n    minified: opts.minified,\n    concise: opts.concise,\n    indent: {\n      adjustMultilineComment: true,\n      style: \"  \",\n    },\n    jsescOption: {\n      quotes: \"double\",\n      wrap: true,\n      minimal: process.env.BABEL_8_BREAKING ? true : false,\n      ...opts.jsescOption,\n    },\n    topicToken: opts.topicToken,\n    importAttributesKeyword: opts.importAttributesKeyword,\n  };\n\n  if (!process.env.BABEL_8_BREAKING) {\n    format.decoratorsBeforeExport = opts.decoratorsBeforeExport;\n    format.jsescOption.json = opts.jsonCompatibleStrings;\n    format.recordAndTupleSyntaxType = opts.recordAndTupleSyntaxType ?? \"hash\";\n  }\n\n  if (format.minified) {\n    format.compact = true;\n\n    format.shouldPrintComment =\n      format.shouldPrintComment || (() => format.comments);\n  } else {\n    format.shouldPrintComment =\n      format.shouldPrintComment ||\n      (value =>\n        format.comments ||\n        value.includes(\"@license\") ||\n        value.includes(\"@preserve\"));\n  }\n\n  if (format.compact === \"auto\") {\n    format.compact = typeof code === \"string\" && code.length > 500_000; // 500KB\n\n    if (format.compact) {\n      console.error(\n        \"[BABEL] Note: The code generator has deoptimised the styling of \" +\n          `${opts.filename} as it exceeds the max of ${\"500KB\"}.`,\n      );\n    }\n  }\n\n  if (format.compact) {\n    format.indent.adjustMultilineComment = false;\n  }\n\n  const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } =\n    format;\n\n  if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {\n    format.auxiliaryCommentBefore = undefined;\n  }\n  if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {\n    format.auxiliaryCommentAfter = undefined;\n  }\n\n  return format;\n}\n\nexport interface GeneratorOptions {\n  /**\n   * Optional string to add as a block comment at the start of the output file.\n   */\n  auxiliaryCommentBefore?: string;\n\n  /**\n   * Optional string to add as a block comment at the end of the output file.\n   */\n  auxiliaryCommentAfter?: string;\n\n  /**\n   * Function that takes a comment (as a string) and returns true if the comment should be included in the output.\n   * By default, comments are included if `opts.comments` is `true` or if `opts.minified` is `false` and the comment\n   * contains `@preserve` or `@license`.\n   */\n  shouldPrintComment?(comment: string): boolean;\n\n  /**\n   * Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces).\n   * Defaults to `false`.\n   */\n  retainLines?: boolean;\n\n  /**\n   * Retain parens around function expressions (could be used to change engine parsing behavior)\n   * Defaults to `false`.\n   */\n  retainFunctionParens?: boolean;\n\n  /**\n   * Should comments be included in output? Defaults to `true`.\n   */\n  comments?: boolean;\n\n  /**\n   * Set to true to avoid adding whitespace for formatting. Defaults to the value of `opts.minified`.\n   */\n  compact?: boolean | \"auto\";\n\n  /**\n   * Should the output be minified. Defaults to `false`.\n   */\n  minified?: boolean;\n\n  /**\n   * Set to true to reduce whitespace (but not as much as opts.compact). Defaults to `false`.\n   */\n  concise?: boolean;\n\n  /**\n   * Used in warning messages\n   */\n  filename?: string;\n\n  /**\n   * Enable generating source maps. Defaults to `false`.\n   */\n  sourceMaps?: boolean;\n\n  inputSourceMap?: any;\n\n  /**\n   * A root for all relative URLs in the source map.\n   */\n  sourceRoot?: string;\n\n  /**\n   * The filename for the source code (i.e. the code in the `code` argument).\n   * This will only be used if `code` is a string.\n   */\n  sourceFileName?: string;\n\n  /**\n   * Set to true to run jsesc with \"json\": true to print \"\\u00A9\" vs. \"©\";\n   * @deprecated use `jsescOptions: { json: true }` instead\n   */\n  jsonCompatibleStrings?: boolean;\n\n  /**\n   * Set to true to enable support for experimental decorators syntax before\n   * module exports. If not specified, decorators will be printed in the same\n   * position as they were in the input source code.\n   * @deprecated Removed in Babel 8\n   */\n  decoratorsBeforeExport?: boolean;\n\n  /**\n   * Options for outputting jsesc representation.\n   */\n  jsescOption?: jsescOptions;\n\n  /**\n   * For use with the recordAndTuple token.\n   * @deprecated It will be removed in Babel 8.\n   */\n  recordAndTupleSyntaxType?: \"bar\" | \"hash\";\n\n  /**\n   * For use with the Hack-style pipe operator.\n   * Changes what token is used for pipe bodies’ topic references.\n   */\n  topicToken?: \"%\" | \"#\" | \"@@\" | \"^^\" | \"^\";\n\n  /**\n   * The import attributes syntax style:\n   * - \"with\"        : `import { a } from \"b\" with { type: \"json\" };`\n   * - \"assert\"      : `import { a } from \"b\" assert { type: \"json\" };`\n   * - \"with-legacy\" : `import { a } from \"b\" with type: \"json\";`\n   */\n  importAttributesKeyword?: \"with\" | \"assert\" | \"with-legacy\";\n}\n\nexport interface GeneratorResult {\n  code: string;\n  map: EncodedSourceMap | null;\n  decodedMap: DecodedSourceMap | undefined;\n  rawMappings: Mapping[] | undefined;\n}\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM) {\n  /**\n   * We originally exported the Generator class above, but to make it extra clear that it is a private API,\n   * we have moved that to an internal class instance and simplified the interface to the two public methods\n   * that we wish to support.\n   */\n\n  // eslint-disable-next-line no-restricted-globals\n  exports.CodeGenerator = class CodeGenerator {\n    private _ast: t.Node;\n    private _format: Format | undefined;\n    private _map: SourceMap | null;\n    constructor(ast: t.Node, opts: GeneratorOptions = {}, code?: string) {\n      this._ast = ast;\n      this._format = normalizeOptions(code, opts);\n      this._map = opts.sourceMaps ? new SourceMap(opts, code) : null;\n    }\n    generate(): GeneratorResult {\n      const printer = new Printer(this._format, this._map);\n\n      return printer.generate(this._ast);\n    }\n  };\n}\n\n/**\n * Turns an AST into code, maintaining sourcemaps, user preferences, and valid output.\n * @param ast - the abstract syntax tree from which to generate output code.\n * @param opts - used for specifying options for code generation.\n * @param code - the original source code, used for source maps.\n * @returns - an object containing the output code and source map.\n */\nexport default function generate(\n  ast: t.Node,\n  opts: GeneratorOptions = {},\n  code?: string | { [filename: string]: string },\n): GeneratorResult {\n  const format = normalizeOptions(code, opts);\n  const map = opts.sourceMaps ? new SourceMap(opts, code) : null;\n\n  const printer = new Printer(format, map);\n\n  return printer.generate(ast);\n}\n"],"names":["SourceMap","_map","_rawMappings","_sourceFileName","_lastGenLine","_lastSourceLine","_lastSourceColumn","_inputMap","constructor","opts","code","map","GenMapping","sourceRoot","sourceFileName","replace","undefined","inputSourceMap","TraceMap","resolvedSources","length","i","setSourceContent","sourcesContent","Object","keys","get","toEncodedMap","getDecoded","toDecodedMap","getRawMappings","allMappings","mark","generated","line","column","identifierName","identifierNamePos","filename","originalMapping","originalPositionFor","name","originalIdentifierMapping","source","maybeAddMapping","original","Buffer","indentChar","_indentChar","_fastIndentations","push","repeat","_allocQueue","_buf","_str","_appendCount","_last","_queue","_queueCursor","_canMarkIdName","_position","_sourcePosition","queue","char","_pushQueue","cursor","item","_popQueue","Error","_flush","result","trimRight","decodedMap","__mergedMap","resultMap","value","defineProperty","writable","rawMappings","mappings","append","str","maybeNewline","_append","appendChar","_appendChar","sourcePosition","queueIndentation","queueCursor","sourcePos","fastIndentation","String","fromCharCode","_mark","len","position","charCodeAt","indexOf","last","removeTrailingNewline","removeLastSemicolon","getLastChar","getNewlineCount","count","endsWithCharAndNewline","lastCp","hasContent","exactSource","loc","cb","prop","_normalizePosition","sourceWithOffset","columnOffset","pos","target","Math","max","getCurrentColumn","lastIndex","getCurrentLine","FLIPPED_ALIAS_KEYS","isArrayExpression","isAssignmentExpression","isBinary","isBlockStatement","isCallExpression","isFunction","isIdentifier","isLiteral","isMemberExpression","isObjectExpression","isOptionalCallExpression","isOptionalMemberExpression","isStringLiteral","_t","crawlInternal","node","state","object","computed","property","left","right","hasCall","callee","hasFunction","hasHelper","isHelper","crawl","isType","nodes","AssignmentExpression","SwitchCase","parent","consequent","cases","LogicalExpression","Literal","CallExpression","OptionalCallExpression","VariableDeclaration","declarations","declar","enabled","id","init","IfStatement","ObjectProperty","ObjectTypeProperty","ObjectMethod","properties","ObjectTypeCallProperty","callProperties","ObjectTypeIndexer","indexers","ObjectTypeInternalSlot","internalSlots","forEach","type","amounts","concat","ret","isArrayTypeAnnotation","isBinaryExpression","isExportDeclaration","isForOfStatement","isIndexedAccessType","isObjectPattern","isYieldExpression","PRECEDENCE","Map","getBinaryPrecedence","nodeType","operator","isTSTypeExpression","isClassExtendsClause","parentType","superClass","hasPostfixPart","tag","NullableTypeAnnotation","FunctionTypeAnnotation","tokenContext","Boolean","TokenContext","arrowFlowReturnType","UpdateExpression","ObjectExpression","expressionStatement","arrowBody","DoExpression","async","Binary","parentPos","nodePos","UnionTypeAnnotation","OptionalIndexedAccessType","objectType","TSAsExpression","TSUnionType","TSInferType","TSInstantiationExpression","typeParameters","BinaryExpression","inForStatementInit","SequenceExpression","test","discriminant","expression","YieldExpression","ClassExpression","exportDefault","UnaryLike","FunctionExpression","ArrowFunctionExpression","ConditionalExpression","OptionalMemberExpression","Identifier","extra","parenthesized","rightType","isFollowedByBracket","optional","forHead","forInHead","forOfHead","await","isDecorator","isExpressionStatement","isNewExpression","isParenthesizedExpression","expandAliases","obj","add","func","fn","set","stack","inForInit","aliases","alias","expandedParens","parens","expandedWhitespaceNodes","whitespace","isOrHasCallExpression","needsWhitespace","flag","needsWhitespaceBefore","needsWhitespaceAfter","needsParens","isDecoratorMemberExpression","TaggedTemplateExpression","print","quasi","TemplateElement","TemplateLiteral","quasis","partRaw","raw","token","expressions","UnaryExpression","word","space","argument","body","ParenthesizedExpression","rightParens","prefix","printTerminatorless","alternate","NewExpression","format","minified","arguments","typeArguments","exit","enterForStatementInit","printList","ThisExpression","Super","_shouldPrintDecoratorsBeforeExport","decoratorsBeforeExport","start","declaration","Decorator","newline","TypeError","Import","AwaitExpression","delegate","EmptyStatement","semicolon","ExpressionStatement","AssignmentPattern","typeAnnotation","BindExpression","MemberExpression","MetaProperty","meta","PrivateName","V8IntrinsicIdentifier","ModuleExpression","indent","directives","dedent","rightBrace","isFor","isForStatement","isIfStatement","isStatement","WithStatement","printBlock","needsBlock","getLastStatement","printAndIndentOnComments","endsWith","statement","ForStatement","update","WhileStatement","ForXStatement","isForOf","noIndentInnerCommentsHere","ForInStatement","ForOfStatement","DoWhileStatement","printStatementAfterKeyword","printer","isLabel","BreakStatement","label","ContinueStatement","ReturnStatement","ThrowStatement","LabeledStatement","TryStatement","block","handlers","handler","finalizer","CatchClause","param","SwitchStatement","printSequence","addNewlines","leading","cas","DebuggerStatement","declare","kind","hasInits","separator","VariableDeclarator","definite","isExportDefaultDeclaration","isExportNamedDeclaration","ClassDeclaration","inExport","printJoin","decorators","abstract","superTypeParameters","implements","ClassBody","ClassProperty","endLine","key","end","catchUp","tsPrintClassMemberModifiers","_variance","ClassAccessorProperty","ClassPrivateProperty","static","ClassMethod","_classMethodHead","ClassPrivateMethod","_methodHead","StaticBlock","_params","idNode","parentNode","nameInfo","_getFuncIdName","call","sourceIdentifierName","_parameters","params","noLineTerminator","returnType","_noLineTerminator","parameters","paramLength","_param","parameter","generator","_predicate","noLineTerminatorAfter","predicate","_functionHead","_endsWithInnerRaw","firstParam","retainLines","hasTypesOrComments","printInnerComments","leadingComments","trailingComments","isClassDeclaration","isExportDefaultSpecifier","isExportNamespaceSpecifier","isImportDefaultSpecifier","isImportNamespaceSpecifier","ImportSpecifier","importKind","imported","local","ImportDefaultSpecifier","ExportDefaultSpecifier","exported","ExportSpecifier","exportKind","ExportNamespaceSpecifier","warningShown","_printAttributes","importAttributesKeyword","attributes","assertions","console","warn","useAssertKeyword","ExportAllDeclaration","maybePrintDecoratorsBeforeExport","ExportNamedDeclaration","specifiers","slice","hasSpecial","first","shift","ExportDefaultDeclaration","ImportDeclaration","isTypeKind","module","phase","hasSpecifiers","ImportAttribute","ImportNamespaceSpecifier","ImportExpression","options","isAssignmentPattern","ArgumentPlaceholder","RestElement","props","shorthand","ArrayExpression","elems","elements","elem","RecordExpression","startToken","endToken","TupleExpression","RegExpLiteral","pattern","flags","BooleanLiteral","NullLiteral","NumericLiteral","getPossibleRaw","jsescOption","numbers","number","jsesc","StringLiteral","val","BigIntLiteral","DecimalLiteral","validTopicTokenSet","Set","TopicReference","topicToken","has","givenTopicTokenJSON","JSON","stringify","validTopics","Array","from","v","join","PipelineTopicExpression","PipelineBareFunction","PipelinePrimaryTopicReference","isDeclareExportDeclaration","AnyTypeAnnotation","ArrayTypeAnnotation","elementType","BooleanTypeAnnotation","BooleanLiteralTypeAnnotation","NullLiteralTypeAnnotation","DeclareClass","_interfaceish","DeclareFunction","InferredPredicate","DeclaredPredicate","DeclareInterface","InterfaceDeclaration","DeclareModule","DeclareModuleExports","DeclareTypeAlias","TypeAlias","DeclareOpaqueType","OpaqueType","DeclareVariable","DeclareExportDeclaration","default","FlowExportDeclaration","DeclareExportAllDeclaration","EnumDeclaration","enumExplicitType","context","hasExplicitType","enumBody","members","member","hasUnknownMembers","EnumBooleanBody","explicitType","EnumNumberBody","EnumStringBody","EnumSymbolBody","EnumDefaultedMember","enumInitializedMember","EnumBooleanMember","EnumNumberMember","EnumStringMember","ExistsTypeAnnotation","this","rest","method","FunctionTypeParam","InterfaceExtends","extends","mixins","variance","andSeparator","InterfaceTypeAnnotation","IntersectionTypeAnnotation","types","MixedTypeAnnotation","EmptyTypeAnnotation","NumberTypeAnnotation","StringTypeAnnotation","ThisTypeAnnotation","TupleTypeAnnotation","TypeofTypeAnnotation","TypeAnnotation","TypeParameterInstantiation","TypeParameter","bound","supertype","impltype","ObjectTypeAnnotation","exact","iterator","inexact","proto","ObjectTypeSpreadProperty","QualifiedTypeIdentifier","qualification","SymbolTypeAnnotation","orSeparator","TypeCastExpression","Variance","VoidTypeAnnotation","IndexedAccessType","indexType","File","program","interpreter","Program","directivesLen","trailingCommentsLineOffset","BlockStatement","Directive","unescapedSingleQuoteRE","unescapedDoubleQuoteRE","DirectiveLiteral","InterpreterDirective","Placeholder","expectedNode","JSXAttribute","JSXIdentifier","JSXNamespacedName","namespace","JSXMemberExpression","JSXSpreadAttribute","JSXExpressionContainer","JSXSpreadChild","JSXText","JSXElement","open","openingElement","selfClosing","child","children","closingElement","spaceSeparator","JSXOpeningElement","JSXClosingElement","JSXEmptyExpression","JSXFragment","openingFragment","closingFragment","JSXOpeningFragment","JSXClosingFragment","TSTypeAnnotation","TSTypeParameterInstantiation","TSTypeParameter","in","out","constraint","TSParameterProperty","accessibility","readonly","TSDeclareFunction","TSDeclareMethod","TSQualifiedName","TSCallSignatureDeclaration","tsPrintSignatureDeclarationBase","TSConstructSignatureDeclaration","TSPropertySignature","tsPrintPropertyOrMethodName","TSMethodSignature","TSIndexSignature","isStatic","TSAnyKeyword","TSBigIntKeyword","TSUnknownKeyword","TSNumberKeyword","TSObjectKeyword","TSBooleanKeyword","TSStringKeyword","TSSymbolKeyword","TSVoidKeyword","TSUndefinedKeyword","TSNullKeyword","TSNeverKeyword","TSIntrinsicKeyword","TSThisType","TSFunctionType","tsPrintFunctionOrConstructorType","TSConstructorType","TSTypeReference","typeName","TSTypePredicate","asserts","parameterName","TSTypeQuery","exprName","TSTypeLiteral","tsPrintTypeLiteralOrInterfaceBody","tsPrintBraced","TSArrayType","TSTupleType","elementTypes","TSOptionalType","TSRestType","TSNamedTupleMember","tsPrintUnionOrIntersectionType","TSIntersectionType","sep","TSConditionalType","checkType","extendsType","trueType","falseType","typeParameter","TSParenthesizedType","TSTypeOperator","TSIndexedAccessType","TSMappedType","nameType","tokenIfPlusMinus","self","tok","TSLiteralType","literal","TSExpressionWithTypeArguments","TSInterfaceDeclaration","extendz","TSInterfaceBody","TSTypeAliasDeclaration","TSTypeExpression","forceParens","TSTypeAssertion","TSEnumDeclaration","const","isConst","TSEnumMember","initializer","TSModuleDeclaration","global","TSModuleBlock","TSImportType","qualifier","TSImportEqualsDeclaration","isExport","moduleReference","TSExternalModuleReference","TSNonNullExpression","TSExportAssignment","TSNamespaceExportDeclaration","isField","override","isClassBody","isTSInterfaceBody","isTSEnumDeclaration","SCIENTIFIC_NOTATION","ZERO_DECIMAL_INTEGER","HAS_NEWLINE","HAS_NEWLINE_OR_BlOCK_COMMENT_END","n","Printer","_indentRepeat","style","old","_currentNode","_indent","_insideAux","_parenPushNewlineState","_printAuxAfterOnNextUserNode","_printedComments","_endsWithInteger","_endsWithWord","_lastCommentLine","_indentInnerComments","generate","ast","_maybeAddAuxComment","compact","concise","force","_space","_maybePrintInnerComments","isNonDecimalLiteral","secondChar","Number","isInteger","lastChar","strFirst","tokenChar","j","_newline","_catchUp","_maybeAddParen","_maybeIndent","_maybeAddParenChar","firstChar","_getIndent","_shouldIndent","parenPushNewlineState","printed","cha","chaPost","terminatorState","oldConcise","_compact","printMethod","ReferenceError","oldNode","oldInAux","shouldPrintParens","retainFunctionParens","exitInForStatementInit","_printLeadingComments","bind","_printTrailingComments","enteredPositionlessNode","_printAuxBeforeComment","_printAuxAfterComment","comment","auxiliaryCommentBefore","_printComment","auxiliaryCommentAfter","rawValue","startLine","newlineOpts","nextNodeStartLine","_printNewline","nextNode","lineOffset","innerComments","_printComments","comments","hasSpace","printedCommentsCount","size","items","commaSeparator","newLine","lastCommentLine","offset","_shouldPrintComment","ignore","shouldPrintComment","skipNewLines","isBlockComment","printNewLines","lastCharCode","adjustMultilineComment","newlineRegex","RegExp","indentSize","nodeLoc","hasLoc","nodeStartLine","nodeEndLine","lastLine","leadingCommentNewline","shouldPrint","commentStartLine","commentEndLine","min","singleLine","shouldSkipNewline","assign","prototype","generatorFunctions","normalizeOptions","quotes","wrap","minimal","includes","error","sourceMaps"],"mappings":"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"}